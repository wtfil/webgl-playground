{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/gl-matrix/esm/mat4.js","webpack:///./node_modules/gl-matrix/esm/vec3.js","webpack:///./src/utils.ts","webpack:///./src/store.ts","webpack:///./src/create-sky.ts","webpack:///./src/index.ts","webpack:///./src/create-terrain.ts","webpack:///./src/shaders/terrain.vertex.glsl","webpack:///./src/shaders/terrain.fragment.glsl","webpack:///./src/init-contol.ts","webpack:///./src/shaders/sky.vertex.glsl","webpack:///./src/shaders/sky.fragment.glsl","webpack:///./src/create-water.ts","webpack:///./src/shaders/water.vertex.glsl","webpack:///./src/shaders/water.fragment.glsl"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","EPSILON","ARRAY_TYPE","RANDOM","Float32Array","Array","Math","random","PI","clone","copy","fromValues","set","identity","transpose","invert","adjoint","determinant","multiply","translate","scale","rotate","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","fromQuat2","getTranslation","getScaling","getRotation","fromRotationTranslationScale","fromRotationTranslationScaleOrigin","fromQuat","frustum","perspective","perspectiveFromFieldOfView","ortho","lookAt","targetTo","str","frob","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","mul","sub","_common_js__WEBPACK_IMPORTED_MODULE_0__","out","a","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","b","b0","b1","b2","b3","v","x","y","z","rad","axis","b12","b20","b21","b22","len","sqrt","sin","cos","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","mat","trace","S","sx","sy","sz","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","yx","zx","zy","left","right","bottom","top","near","far","rl","tb","nf","fovy","aspect","f","tan","Infinity","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","lr","bt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","target","pow","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","length","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","bezier","transformMat4","transformMat3","transformQuat","angle","zero","div","dist","sqrDist","sqrLen","forEach","factorTimes2","factor1","factor2","factor3","factor4","inverseFactor","inverseFactorTimesTwo","zScale","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","tempA","tempB","cosine","acos","vec","stride","offset","count","fn","arg","Mat4","Vec3","createShader","gl","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","warn","getShaderInfoLog","deleteShader","createBuffer","data","buffer","bindBuffer","bufferData","STATIC_DRAW","loadTexture","async","url","image","Promise","resolve","reject","Image","src","onload","onerror","texture","createTexture","isPow2","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","width","height","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","createProgram","vertextShaderSource","fragmentShaderSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","Error","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributes","uniforms","attributesCount","ACTIVE_ATTRIBUTES","uniformsCount","ACTIVE_UNIFORMS","getActiveAttrib","getAttribLocation","getActiveUniform","getUniformLocation","createMatrices","opts","projection","view","model","camera","position","flip","attribute","numComponents","ARRAY_BUFFER","vertexAttribPointer","FLOAT","enableVertexAttribArray","bindArraysToBuffers","arrays","textures","framebuffers","buffers","colors","indices","ELEMENT_ARRAY_BUFFER","Uint16Array","normal","normals","size","createFramebufferAndTexture","createDepthTexture","colorTexture","depthTexture","framebuffer","createFramebuffer","depthRenderBuffer","createRenderbuffer","bindFramebuffer","FRAMEBUFFER","LINEAR","framebufferTexture2D","COLOR_ATTACHMENT0","getExtension","DEPTH_COMPONENT","UNSIGNED_SHORT","DEPTH_ATTACHMENT","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","inRange","toggleViaQS","term","defaultValue","window","location","search","includes","utils_1","create_sky_1","INITIAL_STATE","app","active","autoPilot","terrain","visible","water","start","Date","now","time","useReflection","useRefraction","light","direction","color","sky","dayTime","sunPosition","autoSunMove","getInitialState","setDayTime","toggle","state","key1","key2","zoom","dz","nextDistance","moveCamera","e","forwardMove","leftMove","move","forward","rotateCamera","dx","dy","moveSun","dt","autoMoveSun","spead","updateWaterTime","directionalLightColor","directionalLightVector","getSunPosition","sky_vertex_glsl_1","__importDefault","sky_fragment_glsl_1","createRender","context","sun","useProgram","uniform3fv","cameraPosition","uniformMatrix4fv","drawElements","TRIANGLES","createArrays","j","k","push","pad2","st","slice","createSky","default","render","sunTimeToString","minutes","altitude","getAltitude","azimuth","getAzimuth","lightAttenuation","create_terrain_1","init_contol_1","create_water_1","store_1","addEventListener","canvas","document","querySelector","style","CANVAS_ELEM_SIZE","CANVAS_WIDTH","CANVAS_HEIGHT","getContext","createTerrain","heatmap","chunkSize","DETAILS_LEVEL","baseLevel","TERRAIN_SIZE","createWater","WATER_SIZE","SKY_DOME_SIZE","initControls","requestAnimationFrame","props","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","updateReflectionTexture","clipDirection","updateRefractionTexture","viewport","drawScene","innerWidth","innerHeight","SIZE","terrain_vertex_glsl_1","terrain_fragment_glsl_1","clipLevel","uniform1f","createElement","loadImage","ctx","drawImage","getImageData","u32","Uint32Array","Number","isFinite","h","iw","ih","facesIndexes","faces","facesNormals","p1","p2","p3","elem","toggles","id","getValue","action","setToggleValue","item","_a","setAttribute","_b","removeAttribute","prevTouch","mousedown","pressed","Set","pullKeys","sunTime","has","onKeyPress","onWheel","deltaY","preventDefault","onKeyup","delete","onMouseDown","onMouseUp","onMouseMove","movementX","movementY","onContextMenu","onTouchMove","touch","touches","clientX","clientY","onTouchStart","tearDown","removeEventListener","water_vertex_glsl_1","water_fragment_glsl_1","createUpdateReflectionTexture","renderScene","reflection","createUpdateRefractionTexture","refraction","activeTexture","TEXTURE0","dudv","uniform1i","dudvTexture","TEXTURE1","normalMap","normalMapTexture","TEXTURE2","refractionTexture","TEXTURE3","reflectionTexture","TEXTURE4","depth","textureCoord","dudvOffset","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","disable","refractionFramebuffer","reflectionFramebuffer"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import Mat4 = require('gl-matrix/mat4');\r\nimport Vec3 = require('gl-matrix/vec3');\r\nimport {Program, BufferObject} from './types';\r\nimport {State} from './store';\r\n\r\nfunction createShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n    const shader = gl.createShader(type);\r\n    if (!shader) {\r\n        return null;\r\n    }\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        console.log(source);\r\n        console.warn(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    return shader;\r\n}\r\n\r\n\r\nexport async function loadTexture(gl: WebGLRenderingContext, url: string) {\r\n    const image: HTMLImageElement = await new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.src = url;\r\n        image.onload = () => resolve(image);\r\n        image.onerror = reject;\r\n    });\r\n    const texture = gl.createTexture();\r\n    const isPow2 = (n: number) => (n & (n - 1)) === 0;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D, 0, gl.RGBA,\r\n        gl.RGBA, gl.UNSIGNED_BYTE, image\r\n    );\r\n\r\n    if (!isPow2(image.width) || !isPow2(image.height)) {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    }\r\n\r\n    return texture as WebGLTexture;\r\n\r\n}\r\n\r\nexport function createProgram(\r\n    gl: WebGLRenderingContext,\r\n    vertextShaderSource: string,\r\n    fragmentShaderSource: string,\r\n): Program {\r\n\r\n    const vertexShader = createShader(gl,  gl.VERTEX_SHADER, vertextShaderSource);\r\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n    const program = gl.createProgram();\r\n\r\n    if (!program || !vertexShader || !fragmentShader) {\r\n        throw new Error('Failed to create shader program');\r\n    }\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        console.warn(gl.getProgramInfoLog(program));\r\n        throw new Error('Can not creat program');\r\n    }\r\n    const attributes: Program['attributes'] = {};\r\n    const uniforms: Program['uniforms'] = {};\r\n    const attributesCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n    const uniformsCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n\r\n    for (let i = 0; i < attributesCount; i ++) {\r\n        const name = gl.getActiveAttrib(program, i)!.name;\r\n        attributes[name] = gl.getAttribLocation(program, name);\r\n    }\r\n    for (let i = 0; i < uniformsCount; i ++) {\r\n        const name = gl.getActiveUniform(program, i)!.name;\r\n        uniforms[name] = gl.getUniformLocation(program, name) as WebGLUniformLocation;\r\n    }\r\n\r\n    return {program, uniforms, attributes, gl};\r\n}\r\n\r\nexport function createMatrices(opts: {\r\n    camera: State['camera'],\r\n    aspect: number,\r\n    flip?: boolean,\r\n    far?: number\r\n}) {\r\n    const projection = Mat4.create();\r\n    const view = Mat4.create();\r\n    const model = Mat4.create();\r\n    Mat4.perspective(\r\n        projection,\r\n        Math.PI / 4,\r\n        opts.aspect,\r\n        0.1,\r\n        opts.far || 2000\r\n    );\r\n\r\n    const camera = Vec3.clone(opts.camera.position);\r\n    const center = Vec3.clone(opts.camera.center);\r\n    if (opts.flip) {\r\n        center[2] = -center[2];\r\n        camera[2] = -camera[2];\r\n    }\r\n\r\n    Mat4.lookAt(view, camera, center, [0, 0, 1]);\r\n\r\n    return {model, projection, view};\r\n}\r\n\r\nexport function createBuffer(gl: WebGLRenderingContext, type: number, data: Float32Array | Uint16Array) {\r\n    const buffer = gl.createBuffer();\r\n    gl.bindBuffer(type, buffer);\r\n    gl.bufferData(\r\n        type,\r\n        data,\r\n        gl.STATIC_DRAW\r\n    );\r\n    return buffer as WebGLBuffer;\r\n}\r\n\r\nexport function bindBuffer(gl: WebGLRenderingContext, buffer: WebGLBuffer, attribute: number, numComponents: number) {\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.vertexAttribPointer(\r\n        attribute,\r\n        numComponents,\r\n        gl.FLOAT,\r\n        false,\r\n        0,\r\n        0\r\n    );\r\n    gl.enableVertexAttribArray(attribute);\r\n}\r\n\r\nexport function bindArraysToBuffers(\r\n    gl: WebGLRenderingContext,\r\n    opts: {\r\n        arrays: {\r\n            [key: string]: number[]\r\n        },\r\n        textures?: BufferObject['textures'],\r\n        framebuffers?: BufferObject['framebuffers']\r\n    }\r\n): BufferObject {\r\n    const {arrays, textures = {}, framebuffers = {}} = opts;\r\n    return {\r\n        buffers: {\r\n            position: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.position)),\r\n            colors: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.colors)),\r\n            indices: createBuffer(gl, gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(arrays.indices)),\r\n            normal: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.normals)),\r\n            texture: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.texture))\r\n        },\r\n        textures,\r\n        framebuffers,\r\n        size: arrays.indices.length\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function createFramebufferAndTexture(\r\n    gl: WebGLRenderingContext,\r\n    width: number,\r\n    height: number,\r\n    createDepthTexture = false\r\n) {\r\n    const colorTexture = gl.createTexture() as WebGLTexture;\r\n    const depthTexture = gl.createTexture() as WebGLTexture;\r\n    const framebuffer = gl.createFramebuffer() as WebGLFramebuffer;\r\n    const depthRenderBuffer = gl.createRenderbuffer() as WebGLRenderbuffer;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, colorTexture);\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D, 0, gl.RGBA,\r\n        width, height, 0,\r\n        gl.RGBA, gl.UNSIGNED_BYTE, null\r\n    );\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER,\r\n        gl.COLOR_ATTACHMENT0,\r\n        gl.TEXTURE_2D,\r\n        colorTexture,\r\n        0\r\n    );\r\n\r\n    if (createDepthTexture) {\r\n        if (!gl.getExtension('WEBGL_depth_texture')) {\r\n            console.warn('WEBGL_depth_texture is not supported')\r\n        }\r\n        gl.bindTexture(gl.TEXTURE_2D, depthTexture);\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT,\r\n            width, height, 0,\r\n            gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT, null\r\n        );\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\r\n        gl.framebufferTexture2D(\r\n            gl.FRAMEBUFFER,\r\n            gl.DEPTH_ATTACHMENT,\r\n            gl.TEXTURE_2D,\r\n            depthTexture,\r\n            0\r\n        );\r\n    } else {\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderBuffer);\r\n        gl.renderbufferStorage(\r\n            gl.RENDERBUFFER,\r\n            gl.DEPTH_COMPONENT16,\r\n            width, height\r\n        );\r\n        gl.framebufferRenderbuffer(\r\n            gl.FRAMEBUFFER,\r\n            gl.DEPTH_ATTACHMENT,\r\n            gl.RENDERBUFFER,\r\n            depthRenderBuffer\r\n        ); \r\n    }\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    return {colorTexture, depthTexture, framebuffer, depthRenderBuffer};\r\n}\r\n\r\n\r\nexport function inRange(v: number, min: number, max: number): number {\r\n    if (v < min) {\r\n        return min;\r\n    } else if (v > max) {\r\n        return max;\r\n    }\r\n    return v;\r\n}\r\n\r\n\r\nexport const toggleViaQS = (term: string, defaultValue: boolean) => {\r\n    return window.location.search.includes(term) ? !defaultValue: defaultValue;\r\n}\r\n","import Vec3 = require('gl-matrix/vec3');\r\nimport {inRange, toggleViaQS} from './utils';\r\nimport {getSunPosition} from './create-sky';\r\nimport {FieldsOfType} from './types';\r\n\r\nconst INITIAL_STATE = {\r\n    app: {\r\n        // currently no used\r\n        active: true,\r\n        autoPilot: toggleViaQS('ap', false)\r\n    },\r\n    camera: {\r\n        center: Vec3.fromValues(270, 330, 87),\r\n        position: Vec3.fromValues(330, 414, 84)\r\n    },\r\n    terrain: {\r\n        visible: true\r\n    },\r\n    water: {\r\n        start: Date.now(),\r\n        time: 0,\r\n        visible: true,\r\n        useReflection: toggleViaQS('rfl', true),\r\n        useRefraction: toggleViaQS('rfr', true)\r\n    },\r\n    light: {\r\n        // directional light\r\n        direction: Vec3.fromValues(0, 0, 0),\r\n        color: Vec3.fromValues(0, 0, 0),\r\n    },\r\n    sky: {\r\n        dayTime: 9 * 3600 * 1000,\r\n        // dayTime: 11500000,\r\n        visible: true,\r\n        sunPosition: Vec3.fromValues(0, 0, 0),\r\n        autoSunMove: toggleViaQS('asm', false)\r\n    }\r\n}\r\n\r\nexport type State = typeof INITIAL_STATE;\r\n\r\n\r\nexport const getInitialState = () => {\r\n    setDayTime(INITIAL_STATE, INITIAL_STATE.sky.dayTime)\r\n    return INITIAL_STATE;\r\n}\r\n\r\nexport const toggle = <\r\n    K1 extends keyof State,\r\n    K2 extends FieldsOfType<State[K1], boolean>,\r\n>(\r\n    state: State,\r\n    key1: K1,\r\n    key2: K2\r\n) => {\r\n    (state as any)[key1][key2] = !state[key1][key2];\r\n}\r\n\r\nexport const zoom = (state: State, dz: number) => {\r\n    const {position, center} = state.camera;\r\n    const eye = Vec3.create();\r\n    const distance = Vec3.distance(center, position);\r\n    const nextDistance = inRange(distance + dz, 50, 1000);\r\n    Vec3.sub(eye, position, center);\r\n    Vec3.scale(eye, eye, nextDistance / distance);\r\n    Vec3.add(position, center, eye);\r\n}\r\n\r\nexport const moveCamera = (\r\n    state: State,\r\n    e: {\r\n        left: number,\r\n        forward: number,\r\n        up: number\r\n    }\r\n) => {\r\n    const {position, center} = state.camera;\r\n    const forwardMove = Vec3.create();\r\n    const leftMove = Vec3.create();\r\n    const move = Vec3.create();\r\n    Vec3.sub(forwardMove, center, position);\r\n    Vec3.rotateZ(leftMove, forwardMove, [0, 0, 1], Math.PI / 2);\r\n    leftMove[2] = 0;\r\n\r\n    if (e.forward > 0) {\r\n        Vec3.add(move, move, forwardMove);\r\n    }\r\n    if (e.forward < 0) {\r\n        Vec3.sub(move, move, forwardMove);\r\n    }\r\n    if (e.left > 0) {\r\n        Vec3.add(move, move, leftMove);\r\n    }\r\n    if (e.left < 0) {\r\n        Vec3.sub(move, move, leftMove);\r\n    }\r\n\r\n    Vec3.normalize(move, move);\r\n    Vec3.add(move, move, [0, 0, e.up]);\r\n    Vec3.scale(move, move, 6);\r\n    Vec3.add(position, position, move)\r\n    Vec3.add(center, center, move);\r\n}\r\n\r\nexport const rotateCamera = (state: State, dx: number, dy: number) => {\r\n    const {position, center} = state.camera;\r\n    const eye = Vec3.create();\r\n    Vec3.sub(eye, center, position);\r\n    const length = Vec3.length(eye);\r\n    Vec3.rotateZ(eye, eye, [0, 0, 0], dx);\r\n    eye[2] -= dy;\r\n    Vec3.normalize(eye, eye);\r\n    Vec3.scale(eye, eye, length);\r\n    Vec3.add(center, position, eye);\r\n}\r\n\r\nexport const moveSun = (state: State, dt: number) => {\r\n    const DAY = 24 * 3600 * 1000;\r\n    let dayTime = state.sky.dayTime + dt;\r\n    if (dayTime < 0) {\r\n        dayTime += DAY;\r\n    } else if (dayTime > DAY) {\r\n        dayTime -= DAY;\r\n    }\r\n    setDayTime(state, dayTime);\r\n}\r\nexport const autoMoveSun = (state: State, spead: number) => {\r\n    if (state.sky.autoSunMove) {\r\n        moveSun(state, spead);\r\n    }\r\n}\r\nexport const updateWaterTime = (state: State) => {\r\n    state.water.time = Date.now() - state.water.start;\r\n}\r\n\r\nexport const autoPilot = (state: State) => {\r\n    if (!state.app.autoPilot) {\r\n        return;\r\n    }\r\n    rotateCamera(state, 0.003, 0);\r\n}\r\n\r\nconst setDayTime = (state: State, time: number) => {\r\n    const {\r\n        sunPosition,\r\n        directionalLightColor,\r\n        directionalLightVector\r\n    } = getSunPosition(time);\r\n    state.sky.dayTime = time;\r\n    state.sky.sunPosition = sunPosition;\r\n    state.light.color = directionalLightColor;\r\n    state.light.direction = directionalLightVector;\r\n}\r\n","import Vec3 = require('gl-matrix/vec3');\r\nimport Mat4 = require('gl-matrix/mat4');\r\nimport {createProgram, bindArraysToBuffers, createMatrices, bindBuffer, inRange} from './utils';\r\n\r\nimport vertextShaderSource from './shaders/sky.vertex.glsl';\r\nimport fragmentShaderSource from './shaders/sky.fragment.glsl';\r\nimport {Program, BufferObject} from './types';\r\nimport {State} from './store';\r\n\r\nconst {cos, sin, tan, PI} = Math;\r\n\r\ninterface Context {\r\n    gl: WebGLRenderingContext;\r\n    program: Program;\r\n    sun: BufferObject;\r\n    size: number;\r\n}\r\n\r\nexport function createSky(\r\n    gl: WebGLRenderingContext,\r\n    opts: {\r\n        size: number\r\n    }\r\n) {\r\n    const program = createProgram(\r\n        gl,\r\n        vertextShaderSource,\r\n        fragmentShaderSource\r\n    )\r\n    const sun = bindArraysToBuffers(gl, {\r\n        arrays: createArrays()\r\n    });\r\n    const context = {gl, sun, program, size: opts.size};\r\n    return {\r\n        render: createRender(context)\r\n    }\r\n}\r\n\r\nfunction createRender(context: Context) {\r\n    return function render(opts: {\r\n        state: State,\r\n        aspect: number,\r\n        flip?: boolean\r\n    }) {\r\n        const {gl, program, sun, size} = context;\r\n        const {\r\n            state,\r\n            aspect,\r\n            flip = false\r\n        } = opts;\r\n        const {projection, model, view} = createMatrices({\r\n            camera: state.camera,\r\n            aspect,\r\n            flip,\r\n            far: size * 1.1\r\n        });\r\n        const [x, y, z] = state.camera.position\r\n        Mat4.translate(model, model, [x, y, flip ? -z : z]);\r\n        Mat4.scale(model, model, [size, size, size]);\r\n\r\n        gl.useProgram(program.program);\r\n\r\n        bindBuffer(gl, sun.buffers.position, program.attributes.position, 3);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sun.buffers.indices);\r\n\r\n        gl.uniform3fv(\r\n            program.uniforms.sunPosition,\r\n            state.sky.sunPosition\r\n        );\r\n\r\n        gl.uniform3fv(\r\n            program.uniforms.cameraPosition,\r\n            state.camera.position\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.projection,\r\n            false,\r\n            projection\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.view,\r\n            false,\r\n            view\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.model,\r\n            false,\r\n            model\r\n        );\r\n\r\n        gl.drawElements(gl.TRIANGLES, sun.size, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n\r\nfunction createArrays() {\r\n    const c = 50;\r\n    const position = [];\r\n    const indices = [];\r\n\r\n    for (let i = 0; i <= c; i ++) {\r\n        const b = PI / c * i - PI / 2;\r\n        for (let j = 0; j < c; j ++) {\r\n            const a = PI * 2 / c * j;\r\n            const x = cos(a) * cos(b);\r\n            const y = sin(a) * cos(b);\r\n            const z = sin(b);\r\n            const k = i * c + j;\r\n            position.push(x, y, z);\r\n            if (i === c) {\r\n                continue;\r\n            }\r\n            if (j === c - 1) {\r\n                indices.push(\r\n                    i * c, k + c, k,\r\n                    k + c, k + 1, i * c\r\n                );\r\n            } else {\r\n                indices.push(\r\n                    k, k + 1, k + c,\r\n                    k + 1, k + c, k + c + 1\r\n                );\r\n            }\r\n        }\r\n    }\r\n    \r\n    return {position, indices};\r\n}\r\n\r\n/**\r\n * @see ./bin/sun-positon-regression.js\r\n */\r\nfunction getAzimuth(t: number) {\r\n    return 7.344052639206152e-8 * t - 0.1829595519336553;\r\n}\r\nfunction getAltitude(t: number) {\r\n    return tan(-4.83049e-16 * t * t + 4.21414e-8 * t - 0.420437);\r\n}\r\n\r\nfunction pad2(st: string | number) {\r\n    return ('00' + st).slice(-2);\r\n}\r\n\r\nexport function sunTimeToString(t: number) {\r\n    const minutes = Math.ceil(t / 60 / 1000);\r\n    const m = minutes % 60;\r\n    const h = Math.floor(minutes / 60);\r\n    return `${pad2(h)}:${pad2(m)}`;\r\n}\r\n\r\nexport function getSunPosition(n: number) {\r\n    const t = n % (24 * 3600 * 1000);\r\n    const altitude = getAltitude(t);\r\n    const azimuth = getAzimuth(t);\r\n    const x = cos(altitude) * cos(azimuth);\r\n    const y = cos(altitude) * sin(azimuth);\r\n    const z = sin(altitude);\r\n\r\n    const sunPosition = Vec3.fromValues(x, -y, z);\r\n    const directionalLightColor = Vec3.fromValues(1, 1, 1);\r\n    const directionalLightVector = Vec3.create();\r\n    const lightAttenuation = inRange(z * 3, 0, 1) // use scattering algorithm for this\r\n    Vec3.negate(directionalLightVector, sunPosition);\r\n    Vec3.scale(directionalLightColor, directionalLightColor, lightAttenuation);\r\n\r\n    return {\r\n        sunPosition: Vec3.fromValues(x, -y, z),\r\n        directionalLightColor,\r\n        directionalLightVector\r\n    };\r\n}","import {createTerrain} from './create-terrain';\r\nimport {initControls} from './init-contol';\r\nimport {createWater} from './create-water';\r\nimport {createSky} from './create-sky';\r\nimport {Unpacked} from './types';\r\nimport {\r\n    getInitialState,\r\n    autoMoveSun,\r\n    updateWaterTime,\r\n    State,\r\n    autoPilot\r\n} from './store';\r\n\r\nwindow.addEventListener('load', setup);\r\n\r\nconst CANVAS_ELEM_SIZE = Math.min(window.innerWidth - 1, window.innerHeight - 1, 1024);\r\nconst SIZE = 512;\r\nconst CANVAS_WIDTH = SIZE\r\nconst CANVAS_HEIGHT = SIZE;\r\nconst TERRAIN_SIZE = SIZE * 2;\r\nconst WATER_SIZE = SIZE * 2;\r\nconst SKY_DOME_SIZE = SIZE * 2;\r\nconst DETAILS_LEVEL = 4;\r\n\r\nasync function setup() {\r\n    const canvas = document.querySelector('canvas')!;\r\n    canvas.style.width = CANVAS_ELEM_SIZE + 'px';\r\n    canvas.style.height = CANVAS_ELEM_SIZE + 'px';\r\n    canvas.width = CANVAS_WIDTH;\r\n    canvas.height = CANVAS_HEIGHT;\r\n    const gl = canvas.getContext('experimental-webgl') as WebGLRenderingContext;\r\n    if (!gl) {\r\n        console.warn('Can not create webgl context');\r\n        return;\r\n    }\r\n\r\n    const terrain = await createTerrain(gl, {\r\n        heatmap: 'heightmaps/terrain5.png',\r\n        chunkSize: 20 / DETAILS_LEVEL,\r\n        baseLevel: 120,\r\n        size: [TERRAIN_SIZE, TERRAIN_SIZE, 200]\r\n    });\r\n\r\n    const water = await createWater(gl, {\r\n        size: WATER_SIZE,\r\n    })\r\n\r\n    const sky = createSky(gl, {\r\n        size: SKY_DOME_SIZE\r\n    });\r\n\r\n    const state = getInitialState();\r\n    initControls(canvas, state);\r\n\r\n    function render() {\r\n        if (!state.app.active) {\r\n            return requestAnimationFrame(render);\r\n        }\r\n        updateWaterTime(state);\r\n        autoMoveSun(state, 1e5);\r\n        autoPilot(state);\r\n        drawScene({\r\n            gl: gl!,\r\n            state,\r\n            terrain,\r\n            water,\r\n            sky\r\n        });\r\n        requestAnimationFrame(render);\r\n    }\r\n\r\n    render();\r\n}\r\n\r\n\r\nfunction drawScene(props: {\r\n    gl: WebGLRenderingContext,\r\n    state: State,\r\n    terrain: Unpacked<ReturnType<typeof createTerrain>>,\r\n    water: Unpacked<ReturnType<typeof createWater>>,\r\n    sky: Unpacked<ReturnType<typeof createSky>>\r\n}) {\r\n    const aspect = CANVAS_WIDTH / CANVAS_HEIGHT;\r\n    const {\r\n        gl,\r\n        terrain,\r\n        water,\r\n        sky,\r\n        state\r\n    } = props;\r\n    const opts = {\r\n        state,\r\n        aspect\r\n    };\r\n\r\n    gl.clearDepth(1.0);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);\r\n    gl.clearColor(0, 0, 0, 0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    if (state.water.visible) {\r\n        water.updateReflectionTexture(() => {\r\n            if (state.sky.visible) {\r\n                sky.render({\r\n                    ...opts,\r\n                    flip: true\r\n                });\r\n            }\r\n            if (state.terrain.visible) {\r\n                terrain.render({\r\n                    ...opts,\r\n                    clipDirection: -1,\r\n                    flip: true\r\n                })\r\n            }\r\n        })\r\n        water.updateRefractionTexture(() => {\r\n            if (state.terrain.visible) {\r\n                terrain.render({\r\n                    ...opts,\r\n                    clipDirection: 1\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    gl.viewport(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n\r\n    if (state.water.visible) {\r\n        water.render(opts);\r\n    }\r\n    if (state.terrain.visible) {\r\n        terrain.render(opts)\r\n    }\r\n    if (state.sky.visible) {\r\n        sky.render(opts);\r\n    } else {\r\n        gl.clearColor(0.53, 0.8, 0.98, 1.);\r\n    }\r\n}\r\n","import Mat4 = require('gl-matrix/mat4');\r\nimport Vec3 = require('gl-matrix/vec3');\r\n\r\nimport {createProgram, bindArraysToBuffers, createMatrices, bindBuffer} from './utils';\r\n\r\nimport terrainVertextShaderSource from './shaders/terrain.vertex.glsl';\r\nimport terrainFragmentShaderSource from './shaders/terrain.fragment.glsl';\r\nimport {Program, BufferObject} from './types';\r\nimport {State} from './store';\r\n\r\ninterface Context {\r\n    gl: WebGLRenderingContext;\r\n    program: Program;\r\n    terrain: BufferObject;\r\n    size: number[];\r\n}\r\n\r\nexport async function createTerrain(\r\n    gl: WebGLRenderingContext,\r\n    opts: {\r\n        heatmap: string,\r\n        chunkSize: number,\r\n        baseLevel?: number,\r\n        size: number[]\r\n    }\r\n) {\r\n    const arrays = await createArrays(opts.heatmap, opts.chunkSize, opts.baseLevel);\r\n    const program = createProgram(\r\n        gl,\r\n        terrainVertextShaderSource,\r\n        terrainFragmentShaderSource\r\n    );\r\n    const terrain = bindArraysToBuffers(gl, {\r\n        arrays\r\n    });\r\n\r\n    const context = {terrain, gl, program, size: opts.size};\r\n\r\n    return {\r\n        render: createRender(context)\r\n    }\r\n}\r\n\r\nfunction createRender(context: Context) {\r\n    return function render(opts: {\r\n        state: State,\r\n        aspect: number,\r\n        clipDirection?: -1 | 1 | 0,\r\n        terrainScale?: number[]\r\n        clipLevel?: number,\r\n        flip?: boolean,\r\n    }) {\r\n        const {gl, terrain, program, size} = context;\r\n        const {\r\n            state,\r\n            aspect,\r\n            clipDirection = 0,\r\n            clipLevel = 0,\r\n            flip = false\r\n        } = opts;\r\n        const {projection, model, view} = createMatrices({\r\n            camera: state.camera,\r\n            aspect,\r\n            flip\r\n        });\r\n\r\n        Mat4.scale(model, model, size);\r\n\r\n        gl.useProgram(program.program);\r\n        bindBuffer(gl, terrain.buffers.position, program.attributes.position, 3);\r\n        bindBuffer(gl, terrain.buffers.normal, program.attributes.normal, 3);\r\n        bindBuffer(gl, terrain.buffers.colors, program.attributes.colors, 4);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, terrain.buffers.indices);\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.projection,\r\n            false,\r\n            projection\r\n        );\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.model,\r\n            false,\r\n            model\r\n        );\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.view,\r\n            false,\r\n            view\r\n        );\r\n\r\n        gl.uniform3fv(program.uniforms.directionalLightVector, state.light.direction);\r\n        gl.uniform3fv(program.uniforms.directionalLightColor, state.light.color);\r\n        gl.uniform1f(program.uniforms.clipDirection, clipDirection);\r\n        gl.uniform1f(program.uniforms.clipLevel, clipLevel);\r\n\r\n        gl.drawElements(gl.TRIANGLES, terrain.size, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n}\r\n\r\nasync function createArrays(src: string, size: number, baseLevel: number = 0) {\r\n    const canvas = document.createElement('canvas');\r\n    const image = await loadImage(src);\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) {\r\n        throw new Error('Can not create 2d context');\r\n    }\r\n    ctx.drawImage(image, 0, 0);\r\n    const {data} = ctx.getImageData(0, 0, image.width, image.height);\r\n    const u32 = new Uint32Array(data)\r\n\r\n    const width = Math.floor(image.width / size);\r\n    const height = Math.floor(image.height / size);\r\n    const heatmap = new Float32Array(width * height);\r\n    let max = 0;\r\n\r\n    for (let i = 0; i < height; i ++) {\r\n        for (let j = 0; j < width; j ++) {\r\n            let s = 0;\r\n            for (let k = 0; k < size; k ++) {\r\n                for (let l = 0; l < size; l ++) {\r\n                    s += u32[(i * size * image.width + j * size + k * size + l) * 4]\r\n                }\r\n            }\r\n            const v = s / size / size;\r\n            heatmap[i * width + j] = v;\r\n            if (max < v) {\r\n                max = v;\r\n            }\r\n        }\r\n    }\r\n\r\n    const position = [];\r\n    const indices = [];\r\n    const colors = [];\r\n    const normals = [];\r\n    const texture = [];\r\n\r\n    for (let i = 0; i < height; i ++) {\r\n        for (let j = 0; j < width; j++) {\r\n            const k = i * width + j\r\n            const c = heatmap[k] / max;\r\n            if (!Number.isFinite(c)) {\r\n                console.log({i, j, c})\r\n            }\r\n            position.push(\r\n                j / width - 0.5,\r\n                i / height - 0.5,\r\n                // base level probably should be as the part of transition\r\n                (heatmap[k] - baseLevel) / max\r\n            )\r\n            colors.push(c, c, c, 1)\r\n\r\n            if ((i !== height - 1) && (j !== width - 1)) {\r\n                indices.push(\r\n                    k,\r\n                    k + width,\r\n                    k + 1,\r\n                    k + 1,\r\n                    k + width,\r\n                    k + width + 1,\r\n                );\r\n            }\r\n            texture.push(j / width, i / height);\r\n            \r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < position.length / 3; i ++) {\r\n        const w = width;\r\n        const h = height;\r\n        const iw = i % w;\r\n        const ih = ~~(i / w);\r\n        const facesIndexes = [\r\n            iw > 0 && ih > 0 && [\r\n                i - w,\r\n                i - 1,\r\n                i,\r\n            ],\r\n            iw + 1 < w && ih > 0 && [\r\n                i - w,\r\n                i,\r\n                i - w + 1,\r\n            ],\r\n            iw + 1 < w && ih > 0 && [\r\n                i - w + 1,\r\n                i,\r\n                i + 1,\r\n            ],\r\n            iw > 0 && ih < h && [\r\n                i - 1,\r\n                i + w - 1,\r\n                i,\r\n            ],\r\n            iw > 0 && ih < h && [\r\n                i,\r\n                i + w - 1,\r\n                i + w,\r\n            ],\r\n            iw + 1 < w && ih < h && [\r\n                i,\r\n                i + w,\r\n                i + 1,\r\n            ],\r\n        ];\r\n        const faces = [];\r\n        const facesNormals = [];\r\n\r\n        for (let j = 0; j < facesIndexes.length; j ++) {\r\n            const f = facesIndexes[j];\r\n            for (let k = 0; k < 3; k ++) {\r\n                if (f) {\r\n                    faces.push(\r\n                        position[f[k] * 3],\r\n                        position[f[k] * 3 + 1],\r\n                        position[f[k] * 3 + 2],\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        for (let j = 0; j < faces.length / 9; j ++) {\r\n            const p1 = Vec3.fromValues(\r\n                faces[j * 9 + 0],\r\n                faces[j * 9 + 1],\r\n                faces[j * 9 + 2]\r\n            );\r\n            const p2 = Vec3.fromValues(\r\n                faces[j * 9 + 3],\r\n                faces[j * 9 + 4],\r\n                faces[j * 9 + 5]\r\n            );\r\n            const p3 = Vec3.fromValues(\r\n                faces[j * 9 + 6],\r\n                faces[j * 9 + 7],\r\n                faces[j * 9 + 8]\r\n            );\r\n            ////\r\n            // U = p2 - p1\r\n            // V = p3 - p1\r\n            // N = U x V\r\n            ////\r\n            Vec3.subtract(p2, p2, p1)\r\n            Vec3.subtract(p3, p3, p1)\r\n            Vec3.cross(p2, p2, p3)\r\n            Vec3.normalize(p2, p2);\r\n            facesNormals.push(p2);\r\n        }\r\n\r\n        const n = Vec3.fromValues(0, 0, 0);\r\n        for (let j = 0; j < facesNormals.length; j ++) {\r\n            Vec3.add(n, n, facesNormals[j]);\r\n        }\r\n        Vec3.normalize(n, n);\r\n\r\n        normals.push(n[0], n[1], n[2]);\r\n    }\r\n\r\n    return {\r\n        position,\r\n        indices,\r\n        colors,\r\n        normals,\r\n        texture,\r\n    }\r\n}\r\n\r\nfunction loadImage(src: string): Promise<HTMLImageElement> {\r\n    return new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.src = src;\r\n        image.onload = () => resolve(image);\r\n        image.onerror = reject;\r\n    })\r\n}","module.exports = \"precision lowp float;\\r\\n\\r\\nattribute vec4 position;\\r\\nattribute vec3 normal;\\r\\nattribute vec4 colors;\\r\\n\\r\\nuniform mat4 view;\\r\\nuniform mat4 model;\\r\\nuniform mat4 projection;\\r\\nuniform vec3 directionalLightVector;\\r\\nuniform vec3 directionalLightColor;\\r\\nuniform float clipDirection;\\r\\nuniform float clipLevel;\\r\\n\\r\\nvarying vec3 vLighting;\\r\\nvarying vec2 vTextureCoord;\\r\\nvarying vec4 fragmentColor;\\r\\nvarying float shouldClip;\\r\\n\\r\\nvoid main() {\\r\\n  vec3 ambientLight = vec3(0.1, 0.1, 0.1);\\r\\n  vec3 directionalVector = normalize(directionalLightVector);\\r\\n\\r\\n  float directional = max(dot(normal, directionalVector), 0.0);\\r\\n  vLighting = ambientLight + (directionalLightColor * directional);\\r\\n\\r\\n  gl_Position = projection * view * model * position;\\r\\n\\r\\n  fragmentColor = colors;\\r\\n  if (clipDirection == 1.0) {\\r\\n    shouldClip = position.z > clipLevel ? 1.0 : 0.0;\\r\\n  } else if (clipDirection == -1.0) {\\r\\n    shouldClip = position.z < clipLevel ? 1.0 : 0.0;\\r\\n  } else {\\r\\n    shouldClip = 0.0;\\r\\n  }\\r\\n}\"","module.exports = \"precision lowp float;\\r\\n\\r\\nvarying vec3 vLighting;\\r\\nvarying float shouldClip;\\r\\nvarying vec4 fragmentColor;\\r\\n\\r\\nconst vec4 grassColor = vec4(0.12, 0.43, 0.02, 1.0);\\r\\nconst vec4 snowColor = vec4(1.0);\\r\\nconst vec4 groundColor = vec4(0.85, 0.84, 0.79, 1.0);\\r\\n\\r\\nvoid main() {\\r\\n  if (shouldClip == 1.0) {\\r\\n    discard;\\r\\n  }\\r\\n  float x = fragmentColor.x;\\r\\n  float groundGrassMixFactor = smoothstep(0.1, 0.2, x);\\r\\n  float grassSnowMixFactor = smoothstep(0.7, 0.8, x);\\r\\n  vec4 color = mix(groundColor, grassColor, groundGrassMixFactor);\\r\\n  color = mix(color, snowColor, grassSnowMixFactor);\\r\\n\\r\\n  gl_FragColor = vec4(color.rgb * vLighting, color.a);\\r\\n}\\r\\n\"","import {State, moveSun, rotateCamera, moveCamera, zoom, toggle} from './store';\r\n\r\nexport function initControls(elem: HTMLElement, state: State) {\r\n    const toggles = [\r\n        {\r\n            id: 'terrain',\r\n            key: '1',\r\n            getValue: () => state.terrain.visible,\r\n            action: () => toggle(state, 'terrain', 'visible')\r\n        },\r\n        {\r\n            id: 'water',\r\n            key: '2',\r\n            getValue: () => state.water.visible,\r\n            action: () => toggle(state, 'water', 'visible')\r\n        },\r\n        {\r\n            id: 'refraction',\r\n            key: '3',\r\n            getValue: () => state.water.useRefraction,\r\n            action: () => toggle(state, 'water', 'useRefraction')\r\n        },\r\n        {\r\n            id: 'reflection',\r\n            key: '4',\r\n            getValue: () => state.water.useReflection,\r\n            action: () => toggle(state, 'water', 'useReflection')\r\n        },\r\n        {\r\n            id: 'sky',\r\n            key: '5',\r\n            getValue: () => state.sky.visible,\r\n            action: () => toggle(state, 'sky', 'visible')\r\n        },\r\n        {\r\n            id: 'auto-sun',\r\n            key: '6',\r\n            getValue: () => state.sky.autoSunMove,\r\n            action: () => toggle(state, 'sky', 'autoSunMove')\r\n        },\r\n        {\r\n            id: 'autopilot',\r\n            key: '7',\r\n            getValue: () => state.app.autoPilot,\r\n            action: () => toggle(state, 'app', 'autoPilot')\r\n        },\r\n    ]\r\n    const setToggleValue = (item: typeof toggles[0]) => {\r\n        const toggle = document.querySelector(`[data-toggle-id=${item.id}]`);\r\n        if (item.getValue()) {\r\n            toggle?.setAttribute('checked', 'checked');\r\n        } else {\r\n            toggle?.removeAttribute('checked');\r\n        }\r\n    }\r\n    let mousedown = false;\r\n    let prevTouch: Touch | null;\r\n    const pressed = new Set();\r\n    const pullKeys = () => {\r\n        let left = 0;\r\n        let forward = 0;\r\n        let up = 0;\r\n        let sunTime = 0;\r\n        if (pressed.has('w')) {\r\n            forward ++;\r\n        }\r\n        if (pressed.has('s')) {\r\n            forward --\r\n        }\r\n        if (pressed.has('a')) {\r\n            left ++\r\n        }\r\n        if (pressed.has('d')) {\r\n            left --\r\n        }\r\n        if (pressed.has('e')) {\r\n            up ++\r\n        }\r\n        if (pressed.has('q')) {\r\n            up --\r\n        }\r\n        if (pressed.has('j')) {\r\n            sunTime --;\r\n        }\r\n        if (pressed.has('k')) {\r\n            sunTime ++;\r\n        }\r\n        if (sunTime) {\r\n            moveSun(state, sunTime * 3e5);\r\n        }\r\n        if (left || forward || up) {\r\n            moveCamera(state, {left, forward, up})\r\n        }\r\n\r\n        requestAnimationFrame(pullKeys);\r\n    }\r\n\r\n    const onKeyPress = (e: KeyboardEvent) => {\r\n        for (const item of toggles) {\r\n            if (e.key === item.key) {\r\n                item.action();\r\n                setToggleValue(item);\r\n                return;\r\n            }\r\n        }\r\n        pressed.add(e.key);\r\n    }\r\n\r\n    const onWheel = (e: WheelEvent) => {\r\n        const {deltaY: dy} = e;\r\n        if (dy) {\r\n            zoom(state, dy / Math.abs(dy) * 10);\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    const onKeyup = (e: KeyboardEvent) => {\r\n        pressed.delete(e.key)\r\n    }\r\n\r\n    const onMouseDown = () => {\r\n        mousedown = true;\r\n    }\r\n    const onMouseUp = () => {\r\n        mousedown = false;\r\n    }\r\n    const onMouseMove = (e: MouseEvent) => {\r\n        const {movementX, movementY} = e;\r\n        if (mousedown) {\r\n            rotateCamera(state, -movementX / 500, movementY)\r\n        }\r\n    }\r\n\r\n    const onContextMenu = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    const onTouchMove = (e: TouchEvent) => {\r\n        const touch = e.touches[0]\r\n        if (prevTouch) {\r\n            rotateCamera(\r\n                state,\r\n                (touch.clientX - prevTouch.clientX) / 500,\r\n                prevTouch.clientY - touch.clientY\r\n            )\r\n        }\r\n        prevTouch = touch;\r\n    }\r\n    const onTouchStart = (e: TouchEvent) => {\r\n        prevTouch = null;\r\n    }\r\n\r\n    const tearDown = () => {\r\n        elem.removeEventListener('wheel', onWheel);\r\n        elem.removeEventListener('mousedown', onMouseDown)\r\n        elem.removeEventListener('contextmenu', onContextMenu)\r\n        elem.removeEventListener('touchmove', onTouchMove)\r\n        elem.removeEventListener('touchstart', onTouchStart)\r\n        window.removeEventListener('mouseup', onMouseUp)\r\n        window.removeEventListener('mousemove', onMouseMove)\r\n        window.removeEventListener('keypress', onKeyPress);\r\n        window.removeEventListener('keyup', onKeyup);\r\n        toggles.forEach(item => {\r\n            const toggle = document.querySelector(`[data-toggle-id=${item.id}]`);\r\n            toggle?.removeEventListener('toggle', item.action)\r\n        })\r\n    }\r\n\r\n    pullKeys();\r\n\r\n    elem.addEventListener('wheel', onWheel);\r\n    elem.addEventListener('mousedown', onMouseDown)\r\n    elem.addEventListener('contextmenu', onContextMenu)\r\n    elem.addEventListener('touchmove', onTouchMove)\r\n    elem.addEventListener('touchstart', onTouchStart)\r\n    window.addEventListener('mouseup', onMouseUp)\r\n    window.addEventListener('mousemove', onMouseMove)\r\n    window.addEventListener('keypress', onKeyPress);\r\n    window.addEventListener('keyup', onKeyup);\r\n    toggles.forEach(item => {\r\n        setToggleValue(item)\r\n        const toggle = document.querySelector(`[data-toggle-id=${item.id}]`);\r\n        toggle?.addEventListener('toggle', item.action)\r\n    })\r\n\r\n    return {\r\n        tearDown\r\n    }\r\n}\r\n","module.exports = \"precision lowp float;\\r\\n\\r\\nattribute vec4 position;\\r\\n\\r\\nuniform mat4 view;\\r\\nuniform mat4 model;\\r\\nuniform mat4 projection;\\r\\n\\r\\nvarying vec4 worldPosition;\\r\\n\\r\\nvoid main() {\\r\\n    worldPosition = position;\\r\\n    gl_Position = projection * view * model * worldPosition;\\r\\n}\"","module.exports = \"// credits https://www.shadertoy.com/view/MsVSWt\\r\\nprecision highp float;\\r\\n\\r\\nuniform vec3 sunPosition;\\r\\nvarying vec4 worldPosition;\\r\\n\\r\\nvec3 getSunColor(\\r\\n    vec3 position,\\r\\n    vec3 sun\\r\\n) {\\r\\n    float dis = 1.0 - distance(sun, position);\\r\\n    dis = clamp(dis, 0.01, 1.0);\\r\\n    float z = clamp(sun.z, 0.0, 1.0);\\r\\n    float z2 = pow(z, 1.5);\\r\\n    \\r\\n    float glow = dis;\\r\\n    \\r\\n    dis = pow(dis, 100.0);\\r\\n    dis *= 10.0;\\r\\n    dis = clamp(dis, 0.0, 1.0);\\r\\n    \\r\\n    glow = pow(glow, z * 12.0);\\r\\n    glow = clamp(glow, 0.0, 1.0);\\r\\n    \\r\\n    dis *= pow(z2, 1.0 / 1.65);\\r\\n    glow *= pow(z2, 1.0 / 2.0);\\r\\n    \\r\\n    dis += glow;\\r\\n    \\r\\n    return vec3(1.0,0.6,0.05) * dis;\\r\\n    \\r\\n}\\r\\n\\r\\nvec3 getFastScattering(vec3 position, vec3 sun) {\\r\\n    float atmosphere = sqrt(1.0 - position.z);\\r\\n    vec3 skyColor = vec3(0.2, 0.4, 0.8);\\r\\n    float scatter = pow(sun.z, 1.0 / 15.0);\\r\\n    scatter = 1.0 - clamp(scatter, 0.8, 1.0);\\r\\n    vec3 scatterColor = mix(\\r\\n        vec3(1.0),\\r\\n        vec3(1.0, 0.3, 0.0) * 1.5,\\r\\n        scatter * 2.0\\r\\n    );\\r\\n    skyColor = mix(\\r\\n        skyColor,\\r\\n        scatterColor,\\r\\n        atmosphere / 1.3\\r\\n    );\\r\\n    skyColor = mix(skyColor, vec3(0.0), clamp(-sun.z * 3.0, 0.0, 1.0));\\r\\n    return skyColor;\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n    vec3 world = normalize(worldPosition.xyz);\\r\\n    vec3 sun = normalize(sunPosition);\\r\\n    vec3 color = vec3(0.0);\\r\\n    color += getSunColor(world, sun);\\r\\n    color += getFastScattering(world, sun);\\r\\n\\r\\n    gl_FragColor = vec4(color, 1.0);\\r\\n}\"","import Mat4 = require('gl-matrix/mat4');\r\nimport Vec3 = require('gl-matrix/vec3');\r\nimport {createProgram, loadTexture, createFramebufferAndTexture, bindArraysToBuffers, createMatrices, bindBuffer} from './utils';\r\nimport {Program, BufferObject} from './types';\r\n\r\nimport waterVertextShaderSource from './shaders/water.vertex.glsl';\r\nimport waterFragmentShaderSource from './shaders/water.fragment.glsl';\r\nimport {State} from './store';\r\n\r\ninterface Context {\r\n    gl: WebGLRenderingContext,\r\n    program: Program,\r\n    size: number,\r\n    water: BufferObject\r\n}\r\n\r\nexport async function createWater(\r\n    gl: WebGLRenderingContext,\r\n    opts: {\r\n        size: number,\r\n    }\r\n) {\r\n    const {size} = opts;\r\n    const dudvTexture = await loadTexture(gl, 'textures/dudvmap.png');\r\n    const normalMapTexture = await loadTexture(gl, 'textures/normalmap.png');\r\n    const {\r\n        colorTexture: refractionTexture,\r\n        depthTexture: depthTexture,\r\n        framebuffer: refractionFramebuffer\r\n     } = createFramebufferAndTexture(gl, size, size, true);\r\n    const {\r\n        colorTexture: reflectionTexture,\r\n        framebuffer: reflectionFramebuffer\r\n    } = createFramebufferAndTexture(gl, size, size);\r\n    const program = createProgram(\r\n        gl,\r\n        waterVertextShaderSource,\r\n        waterFragmentShaderSource\r\n    );\r\n    const arrays = createArrays();\r\n    const water = bindArraysToBuffers(gl, {\r\n        arrays,\r\n        framebuffers: {\r\n            refraction: refractionFramebuffer,\r\n            reflection: reflectionFramebuffer\r\n        },\r\n        textures: {\r\n            dudv: dudvTexture,\r\n            normalMap: normalMapTexture,\r\n            refraction: refractionTexture,\r\n            reflection: reflectionTexture,\r\n            depth: depthTexture\r\n        }\r\n    })\r\n\r\n    const context = {gl, program, size, water}\r\n\r\n    return {\r\n        render: createRender(context),\r\n        updateReflectionTexture: createUpdateReflectionTexture(context),\r\n        updateRefractionTexture: createUpdateRefractionTexture(context)\r\n    }\r\n}\r\n\r\nfunction createUpdateReflectionTexture(context: Context) {\r\n    return function updateReflectionTexture(renderScene: () => void) {\r\n        const {gl, water, size} = context;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, water.framebuffers.reflection);\r\n        gl.viewport(0, 0, size, size);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        renderScene();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n}\r\n\r\nfunction createUpdateRefractionTexture(context: Context) {\r\n    return function updateRefractionTexture(renderScene: () => void) {\r\n        const {gl, water, size} = context;\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, water.framebuffers.refraction);\r\n        gl.viewport(0, 0, size, size);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        renderScene();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n}\r\n\r\nfunction createRender(context: Context) {\r\n\r\n    const {\r\n        size,\r\n        program,\r\n        gl,\r\n        water\r\n    } = context;\r\n    \r\n    gl.useProgram(program.program);\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, water.textures.dudv);\r\n    gl.uniform1i(program.uniforms.dudvTexture, 0);\r\n\r\n    gl.activeTexture(gl.TEXTURE1);\r\n    gl.bindTexture(gl.TEXTURE_2D, water.textures.normalMap);\r\n    gl.uniform1i(program.uniforms.normalMapTexture, 1);\r\n\r\n    gl.activeTexture(gl.TEXTURE2);\r\n    gl.bindTexture(gl.TEXTURE_2D, water.textures.refraction);\r\n    gl.uniform1i(program.uniforms.refractionTexture, 2);\r\n\r\n    gl.activeTexture(gl.TEXTURE3);\r\n    gl.bindTexture(gl.TEXTURE_2D, water.textures.reflection);\r\n    gl.uniform1i(program.uniforms.reflectionTexture, 3);\r\n\r\n    gl.activeTexture(gl.TEXTURE4);\r\n    gl.bindTexture(gl.TEXTURE_2D, water.textures.depth);\r\n    gl.uniform1i(program.uniforms.depthTexture, 4);\r\n\r\n    return function render(opts: {\r\n        state: State,\r\n        aspect: number,\r\n    }) {\r\n        const {\r\n            state,\r\n            aspect\r\n        } = opts;\r\n        const {projection, model, view} = createMatrices({\r\n            camera: state.camera,\r\n            aspect\r\n        });\r\n\r\n        Mat4.scale(model, model, [size, size, 1]);\r\n\r\n        gl.useProgram(program.program);\r\n        bindBuffer(gl, water.buffers.position, program.attributes.position, 3);\r\n        bindBuffer(gl, water.buffers.texture, program.attributes.textureCoord, 2);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, water.buffers.indices);\r\n\r\n        gl.uniform1f(program.uniforms.dudvOffset, (state.water.time / 1000 * 0.03) % 1);\r\n        gl.uniform1i(program.uniforms.useRefraction, Number(state.water.useRefraction));\r\n        gl.uniform1i(program.uniforms.useReflection, Number(state.water.useReflection));\r\n        gl.uniform3fv(program.uniforms.cameraPosition, state.camera.position);\r\n        gl.uniform3fv(program.uniforms.directionalLightVector, state.light.direction);\r\n        gl.uniform3fv(program.uniforms.directionalLightColor, state.light.color);\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.projection,\r\n            false,\r\n            projection\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.model,\r\n            false,\r\n            model\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.view,\r\n            false,\r\n            view\r\n        );\r\n\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.drawElements(gl.TRIANGLES, water.size, gl.UNSIGNED_SHORT, 0);\r\n        gl.disable(gl.BLEND);\r\n    }\r\n}\r\n\r\nfunction createArrays() {\r\n    const position = [\r\n        -0.5, -0.5, 0,\r\n        +0.5, -0.5, 0,\r\n        -0.5, +0.5, 0,\r\n        +0.5, +0.5, 0,\r\n    ];\r\n    const indices = [\r\n        0, 2, 1,\r\n        1, 2, 3\r\n    ];\r\n\r\n    const texture = [\r\n        0, 0,\r\n        1, 0,\r\n        0, 1,\r\n        1, 1,\r\n    ];\r\n\r\n    return {position, indices, texture};\r\n}","module.exports = \"precision highp float;\\r\\n\\r\\nattribute vec4 position;\\r\\nattribute vec2 textureCoord;\\r\\n\\r\\nuniform mat4 view;\\r\\nuniform mat4 model;\\r\\nuniform mat4 projection;\\r\\nuniform vec3 cameraPosition;\\r\\n\\r\\nvarying vec2 vTextureCoord;\\r\\nvarying vec4 clipSpace;\\r\\nvarying vec3 fromFragmentToCamera;\\r\\nvarying float reflectionYOffset;\\r\\n\\r\\nconst float tiling = 10.0;\\r\\n\\r\\nvoid main() {\\r\\n    vec4 worldPosition = model * position;\\r\\n    gl_Position = clipSpace = projection * view * worldPosition;\\r\\n\\r\\n    fromFragmentToCamera = cameraPosition - worldPosition.xyz;\\r\\n    vTextureCoord = textureCoord * tiling;\\r\\n}\"","module.exports = \"// credits https://github.com/chinedufn/webgl-water-tutorial\\r\\nprecision highp float;\\r\\n\\r\\nvarying vec2 vTextureCoord;\\r\\nvarying vec4 clipSpace;\\r\\nvarying vec3 fromFragmentToCamera;\\r\\n\\r\\nuniform sampler2D dudvTexture;\\r\\nuniform sampler2D normalMapTexture;\\r\\nuniform sampler2D refractionTexture;\\r\\nuniform sampler2D reflectionTexture;\\r\\nuniform sampler2D depthTexture;\\r\\nuniform float dudvOffset;\\r\\nuniform int useRefraction;\\r\\nuniform int useReflection;\\r\\nuniform vec3 directionalLightVector;\\r\\nuniform vec3 directionalLightColor;\\r\\n\\r\\nconst float waterDistortionStrenth = 0.02;\\r\\nconst float fresnelStrength = 1.00;\\r\\nconst float waterReflectivity = 0.4;\\r\\nconst vec4 shallowWaterColor =  vec4(0.0, 0.1, 0.3, 1.0);\\r\\nconst vec4 deepWaterColor = vec4(0.0, 0.1, 0.2, 1.0);\\r\\nconst float shineDamper = 30.0;\\r\\n\\r\\nfloat getDepthAngle(\\r\\n  vec2 refractTexCoords\\r\\n) {\\r\\n    float near = 0.1;\\r\\n    float far = 50.0;\\r\\n    float nfp = far + near;\\r\\n    float nfm = far - near;\\r\\n\\r\\n    float cameraToFirstThingBehindWater = texture2D(depthTexture, refractTexCoords).r;\\r\\n    float cameraToFirstThingUnderWater = 2.0 * near * far / (nfp - (2.0 * cameraToFirstThingBehindWater - 1.0) * nfm);\\r\\n    float cameraToWaterDepth = gl_FragCoord.z;\\r\\n    float cameraToWaterDistance = 2.0 * near * far / (nfp - (2.0 * cameraToWaterDepth - 1.0) * nfm);\\r\\n    return cameraToFirstThingUnderWater - cameraToWaterDistance;\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n    // distortion\\r\\n    vec2 distortedTexCoords = texture2D(dudvTexture, vec2(vTextureCoord.x, vTextureCoord.y + dudvOffset)).xy * 0.1;\\r\\n    distortedTexCoords = vTextureCoord + vec2(distortedTexCoords.x + dudvOffset, distortedTexCoords.y);\\r\\n\\r\\n    vec2 totalDistortion = (texture2D(dudvTexture, distortedTexCoords).xy * 2.0 - 1.0) * waterDistortionStrenth;\\r\\n\\r\\n    // base refract/reflect texture coordinates\\r\\n    vec2 ndc = (clipSpace.xy / clipSpace.w) / 2.0 + 0.5;\\r\\n    vec2 refractTexCoords = vec2(ndc.x, +ndc.y);\\r\\n    vec2 reflectTexCoords = vec2(ndc.x, 1.0-ndc.y);\\r\\n    float angledWaterDepth = getDepthAngle(refractTexCoords);\\r\\n\\r\\n    // refractive factor\\r\\n    vec3 toCamera = normalize(fromFragmentToCamera);\\r\\n    vec4 normalMapColor = texture2D(normalMapTexture, distortedTexCoords);\\r\\n    vec3 normal = normalMapColor.xyz * 2.0 - 1.0;\\r\\n    normal = normalize(normal);\\r\\n    float refractiveFactor = dot(toCamera, normal);\\r\\n    // TODO do we need this?\\r\\n    refractiveFactor = pow(refractiveFactor, fresnelStrength);\\r\\n\\r\\n    // puting all together\\r\\n    refractTexCoords += totalDistortion;\\r\\n    reflectTexCoords += totalDistortion;\\r\\n    refractTexCoords = clamp(refractTexCoords, 0.001, 0.999);\\r\\n    reflectTexCoords = clamp(reflectTexCoords, 0.001, 0.999);\\r\\n\\r\\n    // lighs\\r\\n    vec3 reflectedLight = reflect(normalize(directionalLightVector), normal);\\r\\n    float specular = max(dot(reflectedLight, toCamera), 0.0);\\r\\n    specular = pow(specular, shineDamper);\\r\\n    vec3 specularHighlights = directionalLightColor * specular * waterReflectivity;\\r\\n\\r\\n    // color\\r\\n    vec4 refractColor = texture2D(refractionTexture, refractTexCoords);\\r\\n    vec4 reflectColor = texture2D(reflectionTexture, reflectTexCoords);\\r\\n    refractColor = mix(refractColor, deepWaterColor, clamp(angledWaterDepth / 10.0, 0.0, 1.0));\\r\\n\\r\\n    if (useReflection == 1 && useRefraction == 1) {\\r\\n      gl_FragColor = mix(reflectColor, refractColor, refractiveFactor);\\r\\n    } else if (useReflection == 1) {\\r\\n      gl_FragColor = reflectColor;\\r\\n    } else if (useRefraction == 1) {\\r\\n      gl_FragColor = refractColor;\\r\\n    }\\r\\n    gl_FragColor = mix(gl_FragColor, shallowWaterColor, 0.2);\\r\\n\\r\\n    gl_FragColor = gl_FragColor + vec4(specularHighlights, 1.0);\\r\\n}\\r\\n\""],"sourceRoot":""}