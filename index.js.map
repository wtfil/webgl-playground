{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/gl-matrix/esm/mat4.js","webpack:///./src/utils.ts","webpack:///./src/index.ts","webpack:///./src/create-terrain.ts","webpack:///./src/shaders/terrain.vertex.glsl","webpack:///./src/shaders/terrain.fragment.glsl","webpack:///./src/init-contol.ts","webpack:///./node_modules/node-libs-browser/node_modules/events/events.js","webpack:///./src/create-water.ts","webpack:///./src/shaders/water.vertex.glsl","webpack:///./src/shaders/water.fragment.glsl","webpack:///./src/create-sun.ts","webpack:///./src/shaders/sun.vertex.glsl","webpack:///./src/shaders/sun.fragment.glsl","webpack:///./src/program-properties.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","EPSILON","ARRAY_TYPE","RANDOM","Float32Array","Array","Math","random","PI","clone","length","fromValues","copy","set","add","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","bezier","transformMat4","transformMat3","transformQuat","rotateX","rotateY","rotateZ","angle","zero","str","exactEquals","equals","sub","mul","div","dist","sqrDist","len","sqrLen","forEach","_common_js__WEBPACK_IMPORTED_MODULE_0__","out","a","x","y","z","sqrt","b","ax","ay","az","bx","by","bz","factorTimes2","factor1","factor2","factor3","factor4","inverseFactor","inverseFactorTimesTwo","zScale","cos","sin","w","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","tempA","tempB","cosine","acos","a0","a1","a2","b0","b1","b2","abs","vec","stride","offset","count","fn","arg","identity","transpose","invert","adjoint","determinant","translate","rotate","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","fromQuat2","getTranslation","getScaling","getRotation","fromRotationTranslationScale","fromRotationTranslationScaleOrigin","fromQuat","frustum","perspective","perspectiveFromFieldOfView","ortho","lookAt","targetTo","frob","multiplyScalar","multiplyScalarAndAdd","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","b3","v","rad","axis","b12","b20","b21","b22","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","translation","bw","aw","magnitude","mat","trace","S","sx","sy","sz","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","yx","zx","zy","left","right","bottom","top","near","far","rl","tb","nf","fovy","aspect","f","tan","Infinity","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","lr","bt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","target","pow","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","Mat4","Vec3","createShader","gl","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","warn","getShaderInfoLog","deleteShader","createBuffer","data","buffer","bindBuffer","bufferData","STATIC_DRAW","loadTexture","async","url","image","Promise","resolve","reject","Image","src","onload","onerror","texture","createTexture","isPow2","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","createProgram","vertextShaderSource","fragmentShaderSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","Error","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributes","uniforms","attributesCount","ACTIVE_ATTRIBUTES","uniformsCount","ACTIVE_UNIFORMS","getActiveAttrib","getAttribLocation","getActiveUniform","getUniformLocation","createMatrices","opts","projection","view","model","flip","cameraPosition","attribute","numComponents","ARRAY_BUFFER","vertexAttribPointer","FLOAT","enableVertexAttribArray","bindArraysToBuffers","arrays","textures","framebuffers","buffers","position","colors","indices","ELEMENT_ARRAY_BUFFER","Uint16Array","normal","normals","size","createFramebufferAndTexture","framebuffer","createFramebuffer","renderbuffer","createRenderbuffer","bindFramebuffer","FRAMEBUFFER","TEXTURE_MAG_FILTER","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","inRange","create_terrain_1","init_contol_1","create_water_1","create_sun_1","program_properties_1","utils_1","window","addEventListener","canvas","document","querySelector","CANVAS_WIDTH","CANVAS_HEIGHT","getContext","propertiesNode","terrain","createTerrain","heatmap","DETAILS_LEVEL","water","createWater","WATER_SIZE","sun","createSun","properties","initProperties","initControls","on","renderWater","updateProperties","renderTerrain","useRefraction","useReflection","renderSun","e","nextDistance","dy","proj","dx","renderProperties","render","time","Date","now","start","_a","getSunPosition","sunPosition","rest","__rest","directionalLightVector","assign","props","waterHeight","clearDepth","clearColor","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","updateReflectionTexture","clipLevel","updateRefractionTexture","viewport","drawScene","requestAnimationFrame","SIZE","innerWidth","innerHeight","terrain_vertex_glsl_1","__importDefault","terrain_fragment_glsl_1","createRender","context","useProgram","uniformMatrix4fv","uniform3fv","uniform1f","clipZ","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","drawElements","TRIANGLES","UNSIGNED_SHORT","disable","maxHeight","createElement","loadImage","ctx","drawImage","getImageData","u32","Uint32Array","levelHeight","j","k","push","h","iw","ih","facesIndexes","faces","facesNormals","p1","p2","p3","createArrays","default","events_1","elem","mousedown","ee","EventEmitter","pressed","pullKeys","emit","deltaY","preventDefault","movementX","movementY","this","_events","_maxListeners","undefined","isFunction","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","TypeError","er","handler","args","listeners","error","arguments","err","slice","apply","addListener","listener","newListener","warned","once","fired","g","removeListener","list","splice","removeAllListeners","listenerCount","evlistener","emitter","water_vertex_glsl_1","water_fragment_glsl_1","createUpdateReflectionTexture","renderScene","reflection","createUpdateRefractionTexture","refraction","textureCoord","dudvOffset","uniform1i","Number","activeTexture","TEXTURE0","dudv","dudvTexture","TEXTURE1","normalMap","normalMapTexture","TEXTURE2","refractionTexture","TEXTURE3","reflectionTexture","refractionFramebuffer","reflectionFramebuffer","sun_vertex_glsl_1","sun_fragment_glsl_1","domeRadius","DAY_SPEED","minutes","altitude","getAltitude","azimuth","getAzimuth","sunTime","DEFAULT_PROPERTIES","LOCALSTORAGE_KEY","arrToString","arr","from","map","toFixed","join","item","localStorage","getItem","JSON","parse","saveProperties","prepared","setItem","stringify","node","info","title","control","columns","body","innerHTML","tr","td","innerText","appendChild"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import Mat4 = require('gl-matrix/mat4');\r\nimport Vec3 = require('gl-matrix/vec3');\r\nimport {Program, BufferObject} from './types';\r\n\r\nfunction createShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n    const shader = gl.createShader(type);\r\n    if (!shader) {\r\n        return null;\r\n    }\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        console.warn(gl.getShaderInfoLog(shader));\r\n        console.warn(source);\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    return shader;\r\n}\r\n\r\n\r\nexport async function loadTexture(gl: WebGLRenderingContext, url: string) {\r\n    const image: HTMLImageElement = await new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.src = url;\r\n        image.onload = () => resolve(image);\r\n        image.onerror = reject;\r\n    });\r\n    const texture = gl.createTexture();\r\n    const isPow2 = (n: number) => (n & (n - 1)) === 0;\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D, 0, gl.RGBA,\r\n        1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,\r\n        new Uint8Array([0, 0, 255, 255])\r\n    );\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D, 0, gl.RGBA,\r\n        gl.RGBA, gl.UNSIGNED_BYTE, image\r\n    );\r\n\r\n    if (isPow2(image.width) && isPow2(image.height)) {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    } else {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n\r\n    return texture as WebGLTexture;\r\n\r\n}\r\n\r\nexport function createProgram(\r\n    gl: WebGLRenderingContext,\r\n    vertextShaderSource: string,\r\n    fragmentShaderSource: string,\r\n): Program {\r\n\r\n    const vertexShader = createShader(gl,  gl.VERTEX_SHADER, vertextShaderSource);\r\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n    const program = gl.createProgram();\r\n\r\n    if (!program || !vertexShader || !fragmentShader) {\r\n        throw new Error('Failed to create shader program');\r\n    }\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        console.warn(gl.getProgramInfoLog(program));\r\n        throw new Error('Can not creat program');\r\n    }\r\n    const attributes: Program['attributes'] = {};\r\n    const uniforms: Program['uniforms'] = {};\r\n    const attributesCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n    const uniformsCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n\r\n    for (let i = 0; i < attributesCount; i ++) {\r\n        const name = gl.getActiveAttrib(program, i)!.name;\r\n        attributes[name] = gl.getAttribLocation(program, name);\r\n    }\r\n    for (let i = 0; i < uniformsCount; i ++) {\r\n        const name = gl.getActiveUniform(program, i)!.name;\r\n        uniforms[name] = gl.getUniformLocation(program, name) as WebGLUniformLocation;\r\n    }\r\n\r\n    return {program, uniforms, attributes, gl};\r\n}\r\n\r\nexport function createMatrices(opts: {\r\n    cameraPosition: Vec3,\r\n    center: Vec3,\r\n    aspect: number,\r\n    flip?: boolean,\r\n    far?: number\r\n}) {\r\n    const projection = Mat4.create();\r\n    const view = Mat4.create();\r\n    const model = Mat4.create();\r\n    let eye: Vec3;\r\n    if (opts.flip) {\r\n        eye = Vec3.clone(opts.cameraPosition);\r\n        Vec3.sub(eye, eye, opts.center);\r\n        eye[2] = -eye[2];\r\n        Vec3.add(eye, eye, opts.center);\r\n    } else {\r\n        eye = opts.cameraPosition;\r\n    }\r\n    Mat4.perspective(\r\n        projection,\r\n        Math.PI / 4,\r\n        opts.aspect,\r\n        0.1,\r\n        opts.far || 2000\r\n    );\r\n    Mat4.lookAt(view, eye, opts.center, [0, 0, 1]);\r\n    return {model, projection, view};\r\n}\r\n\r\nexport function createBuffer(gl: WebGLRenderingContext, type: number, data: Float32Array | Uint16Array) {\r\n    const buffer = gl.createBuffer();\r\n    gl.bindBuffer(type, buffer);\r\n    gl.bufferData(\r\n        type,\r\n        data,\r\n        gl.STATIC_DRAW\r\n    );\r\n    return buffer as WebGLBuffer;\r\n}\r\n\r\nexport function bindBuffer(gl: WebGLRenderingContext, buffer: WebGLBuffer, attribute: number, numComponents: number) {\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.vertexAttribPointer(\r\n        attribute,\r\n        numComponents,\r\n        gl.FLOAT,\r\n        false,\r\n        0,\r\n        0\r\n    );\r\n    gl.enableVertexAttribArray(attribute);\r\n}\r\n\r\nexport function bindArraysToBuffers(\r\n    gl: WebGLRenderingContext,\r\n    opts: {\r\n        arrays: {\r\n            [key: string]: number[]\r\n        },\r\n        textures?: BufferObject['textures'],\r\n        framebuffers?: BufferObject['framebuffers']\r\n    }\r\n): BufferObject {\r\n    const {arrays, textures = {}, framebuffers = {}} = opts;\r\n    return {\r\n        buffers: {\r\n            position: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.position)),\r\n            colors: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.colors)),\r\n            indices: createBuffer(gl, gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(arrays.indices)),\r\n            normal: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.normals)),\r\n            texture: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.texture))\r\n        },\r\n        textures,\r\n        framebuffers,\r\n        size: arrays.indices.length\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function createFramebufferAndTexture(gl: WebGLRenderingContext, width: number, height: number) {\r\n    const texture = gl.createTexture() as WebGLTexture;\r\n    const framebuffer = gl.createFramebuffer() as WebGLFramebuffer;\r\n    const renderbuffer = gl.createRenderbuffer() as WebGLRenderbuffer;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D, 0, gl.RGBA,\r\n        width, height, 0,\r\n        gl.RGBA, gl.UNSIGNED_BYTE, null\r\n    );\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\r\n    gl.renderbufferStorage(\r\n        gl.RENDERBUFFER,\r\n        gl.DEPTH_COMPONENT16,\r\n        width,\r\n        height\r\n    );\r\n\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER,\r\n        gl.COLOR_ATTACHMENT0,\r\n        gl.TEXTURE_2D,\r\n        texture,\r\n        0\r\n    );\r\n    gl.framebufferRenderbuffer(\r\n        gl.FRAMEBUFFER,\r\n        gl.DEPTH_ATTACHMENT,\r\n        gl.RENDERBUFFER,\r\n        renderbuffer,\r\n    );\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    return [texture, framebuffer];\r\n}\r\n\r\n\r\nexport function inRange(v: number, min: number, max: number): number {\r\n    if (v < min) {\r\n        return min;\r\n    } else if (v > max) {\r\n        return max;\r\n    }\r\n    return v;\r\n}","import Vec3 = require('gl-matrix/vec3');\r\n\r\nimport {createTerrain} from './create-terrain';\r\nimport {initControls} from './init-contol';\r\nimport {createWater} from './create-water';\r\nimport {createSun, getSunPosition} from './create-sun';\r\nimport {renderProperties, initProperties} from './program-properties';\r\nimport {inRange} from './utils';\r\nimport {ProgramProperties, Unpacked} from './types';\r\n\r\nwindow.addEventListener('load', setup);\r\n\r\nconst SIZE = Math.min(window.innerWidth, window.innerHeight);\r\nconst CANVAS_WIDTH = SIZE\r\nconst CANVAS_HEIGHT = SIZE;\r\nconst WATER_SIZE = SIZE * 2;\r\nconst DETAILS_LEVEL = 5;\r\n\r\nasync function setup() {\r\n    const canvas = document.querySelector('canvas')!;\r\n    canvas.width = CANVAS_WIDTH;\r\n    canvas.height = CANVAS_HEIGHT;\r\n    const gl = canvas.getContext('experimental-webgl');\r\n    if (!gl) {\r\n        console.warn('Can not create webgl context');\r\n        return;\r\n    }\r\n\r\n    const propertiesNode = document.querySelector('[data-properties]') as HTMLTableElement;\r\n\r\n    const terrain = await createTerrain(gl, {\r\n        heatmap: 'heightmaps/mountain2.png',\r\n        height: 500 / DETAILS_LEVEL,\r\n        size: DETAILS_LEVEL\r\n    });\r\n\r\n    const water = await createWater(gl, {\r\n        size: WATER_SIZE,\r\n    })\r\n\r\n    const sun = createSun(gl);\r\n\r\n    const properties = initProperties();\r\n    const emitter = initControls(canvas);\r\n\r\n    emitter\r\n        .on('toggleRenderWater', () => {\r\n            properties.renderWater = !properties.renderWater;\r\n            updateProperties();\r\n        })\r\n        .on('toggleRenderTerrain', () => {\r\n            properties.renderTerrain = !properties.renderTerrain;\r\n            updateProperties();\r\n        })\r\n        .on('toggleRefraction', () => {\r\n            properties.useRefraction = !properties.useRefraction;\r\n            updateProperties();\r\n        })\r\n        .on('toggleReflection', () => {\r\n            properties.useReflection = !properties.useReflection;\r\n            updateProperties();\r\n        })\r\n        .on('toggleRenderSun', () => {\r\n            properties.renderSun = !properties.renderSun;\r\n            updateProperties();\r\n        })\r\n        .on('zoom', e => {\r\n            const {cameraPosition, center} = properties;\r\n            const eye = Vec3.create();\r\n            const distance = Vec3.distance(center, cameraPosition);\r\n            const nextDistance = inRange(distance + e.dy, 50, 1000);\r\n            Vec3.sub(eye, cameraPosition, center);\r\n            Vec3.scale(eye, eye, nextDistance / distance);\r\n            Vec3.add(cameraPosition, center, eye);\r\n            updateProperties();\r\n        })\r\n        .on('moveCamera', e => {\r\n            const {cameraPosition, center} = properties;\r\n            const distance = Vec3.distance(center, cameraPosition);\r\n            const eye = Vec3.create();\r\n            Vec3.sub(eye, cameraPosition, center);\r\n            const proj = Vec3.clone(eye);\r\n            proj[2] = 0;\r\n            const angle = inRange(\r\n                Vec3.angle(eye, proj) + e.dy * 1e-2,\r\n                0.1,\r\n                Math.PI / 3\r\n            );\r\n            proj[2] = distance * Math.sin(angle);\r\n            Vec3.copy(eye, proj);\r\n            Vec3.rotateZ(eye, eye, [0, 0, 0], e.dx * 1e-2)\r\n            Vec3.add(cameraPosition, center, eye);\r\n            updateProperties();\r\n        })\r\n    \r\n    const updateProperties = () => {\r\n        // saveProperties(properties);\r\n        renderProperties(propertiesNode, properties);\r\n    }\r\n\r\n    function render() {\r\n        const time = Date.now() - properties.start;\r\n        const {sunPosition, ...rest} = getSunPosition(time);\r\n        const directionalLightVector = Vec3.create();\r\n        Vec3.negate(directionalLightVector, sunPosition);\r\n        Object.assign(properties, {\r\n            time,\r\n            sunPosition,\r\n            directionalLightVector,\r\n            ...rest\r\n        });\r\n        updateProperties();\r\n        drawScene({\r\n            gl: gl!,\r\n            properties,\r\n            terrain,\r\n            water,\r\n            sun\r\n        });\r\n        requestAnimationFrame(render);\r\n    }\r\n    \r\n    render();\r\n    updateProperties();\r\n}\r\n\r\n\r\nfunction drawScene(props: {\r\n    gl: WebGLRenderingContext,\r\n    properties: ProgramProperties,\r\n    terrain: Unpacked<ReturnType<typeof createTerrain>>,\r\n    water: Unpacked<ReturnType<typeof createWater>>,\r\n    sun: Unpacked<ReturnType<typeof createSun>>\r\n}) {\r\n    \r\n    const waterHeight = 50 / DETAILS_LEVEL;\r\n    const aspect = CANVAS_WIDTH / CANVAS_HEIGHT;\r\n    const {\r\n        gl,\r\n        terrain,\r\n        water,\r\n        sun,\r\n        properties\r\n    } = props;\r\n    const opts = {\r\n        ...properties,\r\n        aspect\r\n    }\r\n\r\n\r\n    gl.clearDepth(1.0);\r\n    gl.clearColor(0.53, 0.8, 0.98, 1.);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);   \r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    if (properties.renderWater) {\r\n        water.updateReflectionTexture(() => {\r\n            if (properties.renderTerrain) {\r\n                terrain.render({\r\n                    ...opts,\r\n                    waterHeight,\r\n                    clipLevel: -1,\r\n                    flip: true,\r\n                })\r\n            }\r\n            if (properties.renderSun) {\r\n                sun.render(opts);\r\n            }\r\n        })\r\n        water.updateRefractionTexture(() => {\r\n            if (properties.renderTerrain) {\r\n                terrain.render({\r\n                    ...opts,\r\n                    waterHeight,\r\n                    clipLevel: 1,\r\n                    flip: false,\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    gl.viewport(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n\r\n    if (properties.renderSun) {\r\n        sun.render(opts);\r\n    }\r\n    if (properties.renderTerrain) {\r\n        terrain.render({\r\n            ...opts,\r\n            waterHeight,\r\n            clipLevel: 0,\r\n            flip: false,\r\n        })\r\n    }\r\n    if (properties.renderWater) {\r\n        water.render({\r\n            ...opts,\r\n            waterHeight\r\n        });\r\n    }\r\n}\r\n","import Mat4 = require('gl-matrix/mat4');\r\nimport Vec3 = require('gl-matrix/vec3');\r\n\r\nimport {createProgram, bindArraysToBuffers, createMatrices, bindBuffer} from './utils';\r\n\r\nimport terrainVertextShaderSource from './shaders/terrain.vertex.glsl';\r\nimport terrainFragmentShaderSource from './shaders/terrain.fragment.glsl';\r\nimport {Program, BufferObject} from './types';\r\n\r\ninterface Context {\r\n    gl: WebGLRenderingContext,\r\n    program: Program,\r\n    terrain: BufferObject\r\n}\r\n\r\nexport async function createTerrain(\r\n    gl: WebGLRenderingContext,\r\n    opts: {\r\n        heatmap: string,\r\n        height: number,\r\n        size: number\r\n    }\r\n) {\r\n    const arrays = await createArrays(opts.heatmap, opts.height, opts.size);\r\n    const program = createProgram(\r\n        gl,\r\n        terrainVertextShaderSource,\r\n        terrainFragmentShaderSource\r\n    );\r\n    const terrain = bindArraysToBuffers(gl, {\r\n        arrays\r\n    });\r\n\r\n    const context = {terrain, gl, program};\r\n\r\n    return {\r\n        render: createRender(context)\r\n    }\r\n}\r\n\r\nfunction createRender(context: Context) {\r\n    return function render(opts: {\r\n        cameraPosition: Vec3,\r\n        center: Vec3,\r\n        aspect: number,\r\n        clipLevel: -1 | 1 | 0,\r\n        waterHeight: number,\r\n        flip: boolean,\r\n        directionalLightVector: Vec3\r\n    }) {\r\n        const {gl, terrain, program} = context;\r\n        const {\r\n            cameraPosition,\r\n            center,\r\n            aspect,\r\n            clipLevel,\r\n            flip,\r\n            waterHeight,\r\n            directionalLightVector\r\n        } = opts;\r\n        const {projection, model, view} = createMatrices({\r\n            cameraPosition,\r\n            center,\r\n            aspect,\r\n            flip\r\n        });\r\n        // reflection\r\n        if (opts.flip) {\r\n            Mat4.translate(model, model, [0, 0,  clipLevel * waterHeight * 2]);\r\n        }\r\n\r\n        gl.useProgram(program.program);\r\n        bindBuffer(gl, terrain.buffers.position, program.attributes.position, 3);\r\n        bindBuffer(gl, terrain.buffers.normal, program.attributes.normal, 3);\r\n        bindBuffer(gl, terrain.buffers.colors, program.attributes.colors, 4);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, terrain.buffers.indices);\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.projection,\r\n            false,\r\n            projection\r\n        );\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.model,\r\n            false,\r\n            model\r\n        );\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.view,\r\n            false,\r\n            view\r\n        );\r\n\r\n        gl.uniform3fv(program.uniforms.directionalLightVector, directionalLightVector);\r\n        gl.uniform1f(program.uniforms.clipZ, waterHeight);\r\n        gl.uniform1f(program.uniforms.clipLevel, clipLevel);\r\n\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.drawElements(gl.TRIANGLES, terrain.size, gl.UNSIGNED_SHORT, 0);\r\n        gl.disable(gl.BLEND);\r\n    }\r\n}\r\n\r\nasync function createArrays(src: string, maxHeight: number, size: number) {\r\n    const canvas = document.createElement('canvas');\r\n    const image = await loadImage(src);\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) {\r\n        throw new Error('Can not create 2d context');\r\n    }\r\n    ctx.drawImage(image, 0, 0);\r\n    const {data} = ctx.getImageData(0, 0, image.width, image.height);\r\n    const u32 = new Uint32Array(data)\r\n    const levelHeight = 256 / maxHeight;\r\n\r\n    const width = Math.floor(image.width / size);\r\n    const height = Math.floor(image.height / size);\r\n    const heatmap = new Float32Array(width * height);\r\n    let max = 0;\r\n\r\n    for (let i = 0; i < height; i ++) {\r\n        for (let j = 0; j < width; j ++) {\r\n            let s = 0;\r\n            for (let k = 0; k < size; k ++) {\r\n                for (let l = 0; l < size; l ++) {\r\n                    s += u32[(i * size * image.width + j * size + k * size + l) * 4]\r\n                }\r\n            }\r\n            const v = s / size / size / levelHeight;\r\n            heatmap[i * width + j] = v;\r\n            if (max < v) {\r\n                max = v;\r\n            }\r\n        }\r\n    }\r\n\r\n    const position = [];\r\n    const indices = [];\r\n    const colors = [];\r\n    const normals = [];\r\n    const texture = [];\r\n\r\n    for (let i = 0; i < height; i ++) {\r\n        for (let j = 0; j < width; j++) {\r\n            const k = i * width + j\r\n            const c = heatmap[k] / max;\r\n            position.push(\r\n                j - width / 2,\r\n                i - height / 2,\r\n                heatmap[k]\r\n            );\r\n            colors.push(c, c, c, 1)\r\n\r\n            if ((i !== height - 1) && (j !== width - 1)) {\r\n                indices.push(\r\n                    k,\r\n                    k + width,\r\n                    k + 1,\r\n                    k + 1,\r\n                    k + width,\r\n                    k + width + 1,\r\n                );\r\n            }\r\n            texture.push(j / width, i / height);\r\n            \r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < position.length / 3; i ++) {\r\n        const w = width;\r\n        const h = height;\r\n        const iw = i % w;\r\n        const ih = ~~(i / w);\r\n        const facesIndexes = [\r\n            iw > 0 && ih > 0 && [\r\n                i - w,\r\n                i - 1,\r\n                i,\r\n            ],\r\n            iw + 1 < w && ih > 0 && [\r\n                i - w,\r\n                i,\r\n                i - w + 1,\r\n            ],\r\n            iw + 1 < w && ih > 0 && [\r\n                i - w + 1,\r\n                i,\r\n                i + 1,\r\n            ],\r\n            iw > 0 && ih < h && [\r\n                i - 1,\r\n                i + w - 1,\r\n                i,\r\n            ],\r\n            iw > 0 && ih < h && [\r\n                i,\r\n                i + w - 1,\r\n                i + w,\r\n            ],\r\n            iw + 1 < w && ih < h && [\r\n                i,\r\n                i + w,\r\n                i + 1,\r\n            ],\r\n        ];\r\n        const faces = [];\r\n        const facesNormals = [];\r\n\r\n        for (let j = 0; j < facesIndexes.length; j ++) {\r\n            const f = facesIndexes[j];\r\n            for (let k = 0; k < 3; k ++) {\r\n                if (f) {\r\n                    faces.push(\r\n                        position[f[k] * 3],\r\n                        position[f[k] * 3 + 1],\r\n                        position[f[k] * 3 + 2],\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        for (let j = 0; j < faces.length / 9; j ++) {\r\n            const p1 = Vec3.fromValues(\r\n                faces[j * 9 + 0],\r\n                faces[j * 9 + 1],\r\n                faces[j * 9 + 2]\r\n            );\r\n            const p2 = Vec3.fromValues(\r\n                faces[j * 9 + 3],\r\n                faces[j * 9 + 4],\r\n                faces[j * 9 + 5]\r\n            );\r\n            const p3 = Vec3.fromValues(\r\n                faces[j * 9 + 6],\r\n                faces[j * 9 + 7],\r\n                faces[j * 9 + 8]\r\n            );\r\n            ////\r\n            // U = p2 - p1\r\n            // V = p3 - p1\r\n            // N = U x V\r\n            ////\r\n            Vec3.subtract(p2, p2, p1)\r\n            Vec3.subtract(p3, p3, p1)\r\n            Vec3.cross(p2, p2, p3)\r\n            Vec3.normalize(p2, p2);\r\n            facesNormals.push(p2);\r\n        }\r\n\r\n        const n = Vec3.fromValues(0, 0, 0);\r\n        for (let j = 0; j < facesNormals.length; j ++) {\r\n            Vec3.add(n, n, facesNormals[j]);\r\n        }\r\n        Vec3.normalize(n, n);\r\n\r\n        normals.push(n[0], n[1], n[2]);\r\n    }\r\n\r\n    return {\r\n        position,\r\n        indices,\r\n        colors,\r\n        normals,\r\n        texture,\r\n    }\r\n}\r\n\r\nfunction loadImage(src: string): Promise<HTMLImageElement> {\r\n    return new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.src = src;\r\n        image.onload = () => resolve(image);\r\n        image.onerror = reject;\r\n    })\r\n}","module.exports = \"attribute vec4 position;\\r\\nattribute vec3 normal;\\r\\nattribute vec4 colors;\\r\\n\\r\\nuniform mat4 view;\\r\\nuniform mat4 model;\\r\\nuniform mat4 projection;\\r\\nuniform vec3 directionalLightVector;\\r\\nuniform float clipZ;\\r\\nuniform float clipLevel;\\r\\n\\r\\nvarying highp vec3 vLighting;\\r\\nvarying lowp vec2 vTextureCoord;\\r\\nvarying lowp vec4 fragmentColor;\\r\\nvarying float shouldClip;\\r\\n\\r\\nvoid main() {\\r\\n  // light\\r\\n  //highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);\\r\\n  highp vec3 ambientLight = vec3(0, 0, 0);\\r\\n  highp vec3 directionalLightColor = vec3(1, 1, 1);\\r\\n  highp vec3 directionalVector = normalize(directionalLightVector);\\r\\n\\r\\n  highp vec4 transformedNormal = vec4(normal, 1.0);\\r\\n  highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\\r\\n  vLighting = ambientLight + (directionalLightColor * directional);\\r\\n\\r\\n  gl_Position = projection * view * model * position;\\r\\n\\r\\n  fragmentColor = colors;\\r\\n  if (clipLevel == 1.0) {\\r\\n    shouldClip = position.z > clipZ ? 1.0 : 0.0;\\r\\n  } else if (clipLevel == -1.0) {\\r\\n    shouldClip = position.z < clipZ ? 1.0 : 0.0;\\r\\n  } else {\\r\\n    shouldClip = 0.0;\\r\\n  }\\r\\n}\"","module.exports = \"varying highp vec3 vLighting;\\r\\nvarying highp float shouldClip;\\r\\nvarying lowp vec4 fragmentColor;\\r\\n\\r\\nconst lowp vec4 nothingColor = vec4(0.0, 0.0, 0.0, 0.0);\\r\\nconst lowp vec4 grassColor = vec4(0.12, 0.43, 0.02, 1.0);\\r\\nconst lowp vec4 snowColor = vec4(1.0);\\r\\nconst lowp vec4 groundColor = vec4(0.85, 0.84, 0.79, 1.0);\\r\\n\\r\\nvoid main() {\\r\\n  if (shouldClip == 1.0) {\\r\\n    discard;\\r\\n  }\\r\\n  lowp float x = fragmentColor.x;\\r\\n  lowp float groundGrassMixFactor = smoothstep(0.1, 0.2, x);\\r\\n  lowp float grassSnowMixFactor = smoothstep(0.7, 0.8, x);\\r\\n  lowp float nothingGroundMixFactor = smoothstep(0.00, 0.015, x);\\r\\n  lowp vec4 color = mix(groundColor, grassColor, groundGrassMixFactor);\\r\\n  color = mix(color, snowColor, grassSnowMixFactor);\\r\\n  color = mix(nothingColor, color, nothingGroundMixFactor);\\r\\n\\r\\n  gl_FragColor = vec4(color.rgb * vLighting, color.a);\\r\\n}\\r\\n\"","import {EventEmitter} from 'events';\r\n\r\nexport function initControls(elem: HTMLElement) {\r\n    let mousedown = false;\r\n    const ee = new EventEmitter();\r\n    const pressed: {[key: string]: boolean} = {};\r\n    const pullKeys = () => {\r\n        const s = 0.01;\r\n        let dx = 0;\r\n        let dy = 0;\r\n\r\n        if (pressed.w && !pressed.s) {\r\n            dy = 1;\r\n        } else if (pressed.s && !pressed.w) {\r\n            dy = -1\r\n        }\r\n\r\n        if (pressed.a && !pressed.d) {\r\n            dx = -1;\r\n        } else if (pressed.d && !pressed.a) {\r\n            dx = 1;\r\n        }\r\n\r\n        if (dx || dy) {\r\n            ee.emit('moveCamera', {dx, dy});\r\n        }\r\n\r\n        requestAnimationFrame(pullKeys);\r\n    }\r\n    pullKeys();\r\n\r\n    elem.addEventListener('wheel', e => {\r\n        const {deltaY: dy} = e;\r\n        if (dy) {\r\n            ee.emit('zoom', {\r\n                dy: dy / Math.abs(dy) * 10\r\n            });\r\n            e.preventDefault();\r\n        }\r\n    })\r\n    window.addEventListener('keypress', e => {\r\n        switch (e.key) {\r\n            case '1':\r\n                ee.emit('toggleRenderTerrain');\r\n                break;\r\n            case '2':\r\n                ee.emit('toggleRenderWater');\r\n                break;\r\n            case '3':\r\n                ee.emit('toggleRefraction');\r\n                break;\r\n            case '4':\r\n                ee.emit('toggleReflection');\r\n                break;\r\n            case '5':\r\n                ee.emit('toggleRenderSun');\r\n                break;\r\n            default:\r\n                pressed[e.key] = true;\r\n        }\r\n    });\r\n    window.addEventListener('keyup', e => {\r\n        pressed[e.key] = false;\r\n    })\r\n\r\n    elem.addEventListener('mousedown', () => {\r\n        mousedown = true;\r\n    })\r\n    window.addEventListener('mouseup', () => {\r\n        mousedown = false;\r\n    })\r\n    window.addEventListener('mousemove', e => {\r\n        const {movementX, movementY} = e;\r\n        if (mousedown) {\r\n            ee.emit('moveCamera', {dx: -movementX, dy: movementY})\r\n        }\r\n    })\r\n    return ee;\r\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","import Mat4 = require('gl-matrix/mat4');\r\nimport Vec3 = require('gl-matrix/vec3');\r\nimport {createProgram, loadTexture, createFramebufferAndTexture, bindArraysToBuffers, createMatrices, bindBuffer} from './utils';\r\nimport {Program, BufferObject} from './types';\r\n\r\nimport waterVertextShaderSource from './shaders/water.vertex.glsl';\r\nimport waterFragmentShaderSource from './shaders/water.fragment.glsl';\r\n\r\ninterface Context {\r\n    gl: WebGLRenderingContext,\r\n    program: Program,\r\n    size: number,\r\n    water: BufferObject\r\n}\r\n\r\nexport async function createWater(\r\n    gl: WebGLRenderingContext,\r\n    opts: {\r\n        size: number,\r\n    }\r\n) {\r\n    const {size} = opts;\r\n    const dudvTexture = await loadTexture(gl, 'textures/dudvmap.png');\r\n    const normalMapTexture = await loadTexture(gl, 'textures/normalmap.png');\r\n    const [\r\n        refractionTexture,\r\n        refractionFramebuffer\r\n    ] = createFramebufferAndTexture(gl, size, size);\r\n    const [\r\n        reflectionTexture,\r\n        reflectionFramebuffer\r\n    ] = createFramebufferAndTexture(gl, size, size);\r\n    const program = createProgram(\r\n        gl,\r\n        waterVertextShaderSource,\r\n        waterFragmentShaderSource\r\n    );\r\n    const arrays = createArrays();\r\n    const water = bindArraysToBuffers(gl, {\r\n        arrays,\r\n        framebuffers: {\r\n            refraction: refractionFramebuffer,\r\n            reflection: reflectionFramebuffer\r\n        },\r\n        textures: {\r\n            dudv: dudvTexture,\r\n            normalMap: normalMapTexture,\r\n            refraction: refractionTexture,\r\n            reflection: reflectionTexture\r\n        }\r\n    })\r\n\r\n    const context = {gl, program, size, water}\r\n\r\n    return {\r\n        render: createRender(context),\r\n        updateReflectionTexture: createUpdateReflectionTexture(context),\r\n        updateRefractionTexture: createUpdateRefractionTexture(context)\r\n    }\r\n}\r\n\r\nfunction createUpdateReflectionTexture(context: Context) {\r\n    return function updateReflectionTexture(renderScene: () => void) {\r\n        const {gl, water, size} = context;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, water.framebuffers.reflection);\r\n        gl.viewport(0, 0, size, size);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        renderScene();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n}\r\n\r\nfunction createUpdateRefractionTexture(context: Context) {\r\n    return function updateRefractionTexture(renderScene: () => void) {\r\n        const {gl, water, size} = context;\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, water.framebuffers.refraction);\r\n        gl.viewport(0, 0, size, size);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        renderScene();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n}\r\n\r\nfunction createRender(context: Context) {\r\n    return function render(opts: {\r\n        cameraPosition: Vec3,\r\n        center: Vec3,\r\n        aspect: number,\r\n        waterHeight: number,\r\n        directionalLightVector: Vec3,\r\n        time: number,\r\n        useRefraction: boolean,\r\n        useReflection: boolean\r\n    }) {\r\n        const {\r\n            size,\r\n            program,\r\n            gl,\r\n            water\r\n        } = context;\r\n        const {\r\n            cameraPosition,\r\n            center,\r\n            aspect,\r\n            time,\r\n            waterHeight,\r\n            useReflection,\r\n            useRefraction,\r\n            directionalLightVector\r\n        } = opts;\r\n        const {projection, model, view} = createMatrices({\r\n            cameraPosition,\r\n            center,\r\n            aspect\r\n        });\r\n        Mat4.translate(model, model, [0, 0, waterHeight]);\r\n        Mat4.scale(model, model, [size, size, 1]);\r\n\r\n        gl.useProgram(program.program);\r\n        bindBuffer(gl, water.buffers.position, program.attributes.position, 3);\r\n        bindBuffer(gl, water.buffers.texture, program.attributes.textureCoord, 2);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, water.buffers.indices);\r\n\r\n        gl.uniform1f(program.uniforms.dudvOffset, (time / 1000 * 0.06) % 1);\r\n        gl.uniform1i(program.uniforms.useRefraction, Number(useRefraction));\r\n        gl.uniform1i(program.uniforms.useReflection, Number(useReflection));\r\n        gl.uniform3fv(program.uniforms.center, center);\r\n        gl.uniform3fv(program.uniforms.cameraPosition, cameraPosition);\r\n        gl.uniform3fv(program.uniforms.directionalLightVector, directionalLightVector);\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.projection,\r\n            false,\r\n            projection\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.model,\r\n            false,\r\n            model\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.view,\r\n            false,\r\n            view\r\n        );\r\n\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, water.textures.dudv);\r\n        gl.uniform1i(program.uniforms.dudvTexture, 0);\r\n\r\n        gl.activeTexture(gl.TEXTURE1);\r\n        gl.bindTexture(gl.TEXTURE_2D, water.textures.normalMap);\r\n        gl.uniform1i(program.uniforms.normalMapTexture, 1);\r\n\r\n        gl.activeTexture(gl.TEXTURE2);\r\n        gl.bindTexture(gl.TEXTURE_2D, water.textures.refraction);\r\n        gl.uniform1i(program.uniforms.refractionTexture, 2);\r\n\r\n        gl.activeTexture(gl.TEXTURE3);\r\n        gl.bindTexture(gl.TEXTURE_2D, water.textures.reflection);\r\n        gl.uniform1i(program.uniforms.reflectionTexture, 3);\r\n\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.drawElements(gl.TRIANGLES, water.size, gl.UNSIGNED_SHORT, 0);\r\n        gl.disable(gl.BLEND);\r\n    }\r\n}\r\n\r\nfunction createArrays() {\r\n    const position = [\r\n        -0.5, -0.5, 0,\r\n        +0.5, -0.5, 0,\r\n        -0.5, +0.5, 0,\r\n        +0.5, +0.5, 0,\r\n    ];\r\n    const indices = [\r\n        0, 2, 1,\r\n        1, 2, 3\r\n    ];\r\n    const texture = [\r\n        0, 0,\r\n        1, 0,\r\n        0, 1,\r\n        1, 1\r\n    ];\r\n\r\n    return {position, indices, texture};\r\n}","module.exports = \"attribute vec4 position;\\r\\nattribute vec2 textureCoord;\\r\\n\\r\\nuniform mat4 view;\\r\\nuniform mat4 model;\\r\\nuniform mat4 projection;\\r\\nuniform vec3 cameraPosition;\\r\\n\\r\\nvarying highp vec2 vTextureCoord;\\r\\nvarying highp vec4 clipSpace;\\r\\nvarying highp vec3 fromFragmentToCamera;\\r\\n\\r\\nconst lowp float tiling = 10.0;\\r\\n\\r\\nvoid main() {\\r\\n    vec4 worldPosition = model * position;\\r\\n    gl_Position = clipSpace = projection * view * worldPosition;\\r\\n\\r\\n    fromFragmentToCamera = cameraPosition - worldPosition.xyz;\\r\\n    vTextureCoord = textureCoord * tiling;\\r\\n}\"","module.exports = \"varying lowp vec2 vTextureCoord;\\r\\nvarying lowp vec4 clipSpace;\\r\\nvarying lowp vec3 fromFragmentToCamera;\\r\\n\\r\\nuniform sampler2D dudvTexture;\\r\\nuniform sampler2D normalMapTexture;\\r\\nuniform sampler2D refractionTexture;\\r\\nuniform sampler2D reflectionTexture;\\r\\nuniform lowp float dudvOffset;\\r\\nuniform int useRefraction;\\r\\nuniform int useReflection;\\r\\nuniform lowp vec3 directionalLightVector;\\r\\n\\r\\nconst lowp float waterDistortionStrenth = 0.03;\\r\\nconst lowp float fresnelStrength = 1.5;\\r\\nconst lowp float waterReflectivity = 0.5;\\r\\nconst lowp vec3 sunlightColor = vec3(1.0, 1.0, 1.0);\\r\\nconst lowp vec4 shallowWaterColor =  vec4(0.0, 0.1, 0.3, 1.0);\\r\\n// const lowp vec4 deepWaterColor = vec4(0.0, 0.1, 0.2, 1.0);\\r\\nconst lowp float shineDamper = 20.0;\\r\\n\\r\\nvoid main() {\\r\\n    // distortion\\r\\n    lowp vec2 distortedTexCoords = texture2D(dudvTexture, vec2(vTextureCoord.x, vTextureCoord.y + dudvOffset)).xy * 0.1;\\r\\n    distortedTexCoords = vTextureCoord + vec2(distortedTexCoords.x + dudvOffset, distortedTexCoords.y);\\r\\n\\r\\n    lowp vec2 totalDistortion = (texture2D(dudvTexture, distortedTexCoords).xy * 2.0 - 1.0) * waterDistortionStrenth;\\r\\n\\r\\n    // base refract/reflect texture coordinates\\r\\n    lowp vec2 ndc = (clipSpace.xy / clipSpace.w) / 2.0 + 0.5;\\r\\n    lowp vec2 refractTexCoords = vec2(ndc.x, +ndc.y);\\r\\n    lowp vec2 reflectTexCoords = vec2(ndc.x, 1.0-ndc.y);\\r\\n\\r\\n    // refractive factor\\r\\n    lowp vec3 toCamera = normalize(fromFragmentToCamera);\\r\\n    lowp vec4 normalMapColor = texture2D(normalMapTexture, distortedTexCoords);\\r\\n    lowp vec3 normal = vec3(\\r\\n      normalMapColor.r * 2.0 - 1.0,\\r\\n      normalMapColor.g * 2.0 - 1.0,\\r\\n      normalMapColor.b * 2.0 - 1.0\\r\\n    );\\r\\n    normal = normalize(normal);\\r\\n    lowp float refractiveFactor = dot(toCamera, normal);\\r\\n    refractiveFactor = pow(refractiveFactor, fresnelStrength);\\r\\n\\r\\n    // puting all together\\r\\n    refractTexCoords += totalDistortion;\\r\\n    reflectTexCoords += totalDistortion;\\r\\n    // refractTexCoords = clamp(refractTexCoords, 0.001, 0.999);\\r\\n    // reflectTexCoords.x = clamp(reflectTexCoords.x, 0.001, 0.999);\\r\\n    // reflectTexCoords.y = clamp(reflectTexCoords.y, -0.999, -0.001);\\r\\n\\r\\n    // lighs\\r\\n    lowp vec3 reflectedLight = reflect(normalize(directionalLightVector), normal);\\r\\n    lowp float specular = max(dot(reflectedLight, toCamera), 0.0);\\r\\n    specular = pow(specular, shineDamper);\\r\\n    lowp vec3 specularHighlights = sunlightColor * specular * waterReflectivity;\\r\\n\\r\\n    // color\\r\\n    lowp vec4 refractColor = texture2D(refractionTexture, refractTexCoords);\\r\\n    lowp vec4 reflectColor = texture2D(reflectionTexture, reflectTexCoords);\\r\\n\\r\\n    if (useReflection == 1 && useRefraction == 1) {\\r\\n      gl_FragColor = mix(reflectColor, refractColor, refractiveFactor);\\r\\n    } else if (useReflection == 1) {\\r\\n      gl_FragColor = reflectColor;\\r\\n    } else if (useRefraction == 1) {\\r\\n      gl_FragColor = refractColor;\\r\\n    }\\r\\n    gl_FragColor = mix(gl_FragColor, shallowWaterColor, 0.2);\\r\\n\\r\\n    gl_FragColor = gl_FragColor + vec4(specularHighlights, 0.0);\\r\\n}\\r\\n\"","import Vec3 = require('gl-matrix/vec3');\r\nimport Mat4 = require('gl-matrix/mat4');\r\nimport {createProgram, bindArraysToBuffers, createMatrices, bindBuffer} from './utils';\r\n\r\nimport sunVertextShaderSource from './shaders/sun.vertex.glsl';\r\nimport sunFragmentShaderSource from './shaders/sun.fragment.glsl';\r\nimport {Program, BufferObject} from './types';\r\n\r\nconst {cos, sin, tan, PI} = Math;\r\n\r\ninterface Context {\r\n    gl: WebGLRenderingContext,\r\n    program: Program,\r\n    sun: BufferObject\r\n}\r\n\r\nexport function createSun(gl: WebGLRenderingContext) {\r\n    const program = createProgram(\r\n        gl,\r\n        sunVertextShaderSource,\r\n        sunFragmentShaderSource\r\n    )\r\n    const sun = bindArraysToBuffers(gl, {\r\n        arrays: createArrays()\r\n    });\r\n    const context = {gl, sun, program};\r\n    return {\r\n        render: createRender(context)\r\n    }\r\n}\r\n\r\nfunction createRender(context: Context) {\r\n    return function render(opts: {\r\n        cameraPosition: Vec3,\r\n        center: Vec3,\r\n        aspect: number,\r\n        sunPosition: Vec3,\r\n    }) {\r\n        const domeRadius = 2000;\r\n        const {gl, program, sun} = context;\r\n        const {\r\n            cameraPosition,\r\n            center,\r\n            aspect,\r\n            sunPosition\r\n        } = opts;\r\n        const {projection, model, view} = createMatrices({\r\n            cameraPosition,\r\n            center,\r\n            aspect,\r\n            far: domeRadius * 2\r\n        });\r\n        Mat4.scale(model, model, [domeRadius, domeRadius, domeRadius]);\r\n\r\n        gl.useProgram(program.program);\r\n\r\n        bindBuffer(gl, sun.buffers.position, program.attributes.position, 3);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sun.buffers.indices);\r\n\r\n        gl.uniform1f(\r\n            program.uniforms.domeRadius,\r\n            domeRadius\r\n        );\r\n\r\n        gl.uniform3fv(\r\n            program.uniforms.sunPosition,\r\n            sunPosition\r\n        );\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.projection,\r\n            false,\r\n            projection\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.view,\r\n            false,\r\n            view\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.model,\r\n            false,\r\n            model\r\n        );\r\n\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.drawElements(gl.TRIANGLES, sun.size, gl.UNSIGNED_SHORT, 0);\r\n        gl.disable(gl.BLEND);\r\n    }\r\n}\r\n\r\nfunction createArrays() {\r\n    const c = 50;\r\n    const position = [];\r\n    const indices = [];\r\n\r\n    for (let i = 0; i <= c; i ++) {\r\n        const b = PI / c * i - PI / 2;\r\n        for (let j = 0; j < c; j ++) {\r\n            const a = PI * 2 / c * j;\r\n            const x = cos(a) * cos(b);\r\n            const y = sin(a) * cos(b);\r\n            const z = sin(b);\r\n            const k = i * c + j;\r\n            position.push(x, y, z);\r\n            if (i === c) {\r\n                continue;\r\n            }\r\n            if (j === c - 1) {\r\n                indices.push(\r\n                    i * c, k + c, k,\r\n                    k + c, k + 1, i * c\r\n                );\r\n            } else {\r\n                indices.push(\r\n                    k, k + 1, k + c,\r\n                    k + 1, k + c, k + c + 1\r\n                );\r\n            }\r\n        }\r\n    }\r\n    \r\n    return {position, indices};\r\n}\r\n\r\n/**\r\n * @see ./bin/sun-positon-regression.js\r\n */\r\nfunction getAzimuth(t: number) {\r\n    return 7.344052639206152e-8 * t - 0.1829595519336553;\r\n}\r\nfunction getAltitude(t: number) {\r\n    return tan(-4.83049e-16 * t * t + 4.21414e-8 * t - 0.420437);\r\n}\r\n\r\nconst DAY_SPEED = 4e-3;\r\n\r\nexport function getSunPosition(n: number) {\r\n    const t = (n * DAY_SPEED) % 24 * 3600 * 1000;\r\n    const minutes = Math.ceil(t / 60 / 1000);\r\n    const m = minutes % 60;\r\n    const h = Math.floor(minutes / 60);\r\n    const altitude = getAltitude(t) / 2;\r\n    const azimuth = getAzimuth(t);\r\n    const x = cos(altitude) * cos(azimuth);\r\n    const y = cos(altitude) * sin(azimuth);\r\n    const z = sin(altitude);\r\n    return {\r\n        sunTime: `${h}:${m}`,\r\n        altitude,\r\n        azimuth,\r\n        sunPosition: Vec3.fromValues(x, -y, z)\r\n    };\r\n}","module.exports = \"attribute vec4 position;\\r\\n\\r\\nuniform lowp mat4 view;\\r\\nuniform lowp mat4 model;\\r\\nuniform lowp mat4 projection;\\r\\n\\r\\nvarying lowp vec4 worldPosition;\\r\\n\\r\\nvoid main() {\\r\\n    worldPosition = model * position;\\r\\n    gl_Position = projection * view * worldPosition;\\r\\n}\"","module.exports = \"uniform lowp float domeRadius;\\r\\nuniform lowp vec3 sunPosition;\\r\\n\\r\\nvarying lowp vec4 worldPosition;\\r\\n\\r\\nconst lowp float PI = 3.1415926535897932384626433832795;\\r\\nconst lowp float PI_2 = 1.57079632679489661923;\\r\\nconst lowp vec4 daySkyColor = vec4(0.67, 0.96, 0.98, 1.00);\\r\\nconst lowp vec4 nigthSkyColor = vec4(0.0, 0.0, 0.0, 1.0);\\r\\nconst lowp vec4 sunColorInner = vec4(0.89, 0.40, 0.00, 1.00);\\r\\nconst lowp vec4 sunColorOuter = vec4(0.95, 0.77, 0.35, 1.00);\\r\\nconst lowp float maxSunHeight = 0.2;\\r\\n\\r\\n\\r\\nvoid main() {\\r\\n    lowp float sunSize = 150.0;\\r\\n    lowp float sunToFragment = distance(sunPosition * domeRadius, worldPosition.xyz);\\r\\n    lowp float colorFactor = smoothstep(0.0, sunSize, pow(sunToFragment, 1.0));\\r\\n    lowp float alpha = 0.5 - atan((sunToFragment - sunSize) / domeRadius * 10.0) / PI;\\r\\n    lowp vec4 skyColor = mix(\\r\\n        daySkyColor,\\r\\n        nigthSkyColor,\\r\\n        smoothstep(maxSunHeight, -maxSunHeight, sunPosition.z)\\r\\n    );\\r\\n\\r\\n    lowp vec4 sunColor = mix(sunColorInner, sunColorOuter, colorFactor);\\r\\n    gl_FragColor = mix(skyColor, sunColor, alpha);\\r\\n}\"","import Vec3 = require('gl-matrix/vec3');\r\nimport {ProgramProperties} from './types';\r\n\r\nconst DEFAULT_PROPERTIES: ProgramProperties = {\r\n    center: Vec3.fromValues(0, 0, 0),\r\n    cameraPosition: Vec3.fromValues(678, 115, 69),\r\n\r\n    directionalLightVector: Vec3.fromValues(0, 0, -1),\r\n    sunPosition: Vec3.fromValues(0, 0, -1),\r\n    start: Date.now(),\r\n    time: 0,\r\n    renderWater: true,\r\n    renderTerrain: true,\r\n    useReflection: true,\r\n    useRefraction: true,\r\n    renderSun: true\r\n};\r\nconst LOCALSTORAGE_KEY = 'wp-program-params';\r\n\r\nconst arrToString = (arr: Float32Array) => {\r\n    return Array.from(arr)\r\n        .map(i => {\r\n            const sign = i > 0 ? '+' : '-';\r\n            return sign + Math.abs(i).toFixed(1)\r\n        })\r\n        .join(', ')\r\n}\r\n\r\nexport function initProperties(): ProgramProperties {\r\n    const item = localStorage.getItem(LOCALSTORAGE_KEY);\r\n    const properties = item ?\r\n        JSON.parse(item) :\r\n        DEFAULT_PROPERTIES;\r\n    return {\r\n        ...properties,\r\n        start: Date.now()\r\n    }\r\n}\r\n\r\nexport function saveProperties(properties: ProgramProperties) {\r\n    const prepared = {\r\n        ...properties,\r\n        center: Array.from(properties.center),\r\n        cameraPosition: Array.from(properties.cameraPosition),\r\n    }\r\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(prepared));\r\n}\r\n\r\nexport function renderProperties(node: HTMLTableElement, properties: ProgramProperties) {\r\n\r\n    const info = [\r\n        {\r\n            title: 'sun position',\r\n            value: arrToString(properties.sunPosition)\r\n        },\r\n        {\r\n            title: 'sun time',\r\n            value: properties.sunTime\r\n        },\r\n        {\r\n            title: 'altitude',\r\n            value: (properties.altitude! * 180 / Math.PI).toFixed(2)\r\n        },\r\n        {\r\n            title: 'azimuth',\r\n            value: (properties.azimuth! * 180 / Math.PI).toFixed(2)\r\n        },\r\n        {\r\n            title: 'camera',\r\n            control: 'a d w s wheel mouse',\r\n            value: arrToString(properties.cameraPosition)\r\n        },\r\n        {\r\n            title: 'terrain',\r\n            control: '1',\r\n            value: properties.renderTerrain\r\n        },\r\n        {\r\n            title: 'water',\r\n            control: '2',\r\n            value: properties.renderWater\r\n        },\r\n        {\r\n            title: 'use refraction',\r\n            control: '3',\r\n            value: properties.useRefraction\r\n        },\r\n        {\r\n            title: 'use reflection',\r\n            control: '4',\r\n            value: properties.useReflection\r\n        },\r\n        {\r\n            title: 'render sun disk',\r\n            control: '5',\r\n            value: properties.renderSun\r\n        },\r\n    ];\r\n    const columns = ['title', 'control', 'value'];\r\n    const body = node.querySelector('tbody')!;\r\n    body.innerHTML = '';\r\n\r\n    info.forEach((item: any) => {\r\n        const tr = document.createElement('tr');\r\n        columns.forEach(key => {\r\n            const td = document.createElement('td');\r\n            td.innerText = key in item ? item[key] : '';\r\n            tr.appendChild(td);\r\n        })\r\n        body.appendChild(tr);\r\n    })\r\n}"],"sourceRoot":""}