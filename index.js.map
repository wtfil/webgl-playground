{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/gl-matrix/esm/vec3.js","webpack:///./src/index.ts","webpack:///./node_modules/gl-matrix/esm/mat4.js","webpack:///./src/shaders/terrain.vertex.glsl","webpack:///./src/shaders/terrain.fragment.glsl","webpack:///./src/shaders/water.vertex.glsl","webpack:///./src/shaders/water.fragment.glsl","webpack:///./src/shaders/sun.vertex.glsl","webpack:///./src/shaders/sun.fragment.glsl","webpack:///./src/create-terrain.ts","webpack:///./src/init-contol.ts","webpack:///./node_modules/node-libs-browser/node_modules/events/events.js","webpack:///./src/create-water.ts","webpack:///./src/create-sun.ts","webpack:///./src/program-properties.ts","webpack:///./src/utils.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","EPSILON","ARRAY_TYPE","RANDOM","Float32Array","Array","Math","random","PI","clone","length","fromValues","copy","set","add","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","bezier","transformMat4","transformMat3","transformQuat","rotateX","rotateY","rotateZ","angle","zero","str","exactEquals","equals","sub","mul","div","dist","sqrDist","len","sqrLen","forEach","_common_js__WEBPACK_IMPORTED_MODULE_0__","out","a","x","y","z","sqrt","b","ax","ay","az","bx","by","bz","factorTimes2","factor1","factor2","factor3","factor4","inverseFactor","inverseFactorTimesTwo","zScale","cos","sin","w","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","tempA","tempB","cosine","acos","a0","a1","a2","b0","b1","b2","abs","vec","stride","offset","count","fn","arg","Mat4","Vec3","terrain_vertex_glsl_1","__importDefault","terrain_fragment_glsl_1","water_vertex_glsl_1","water_fragment_glsl_1","sun_vertex_glsl_1","sun_fragment_glsl_1","create_terrain_1","init_contol_1","create_water_1","create_sun_1","program_properties_1","utils_1","window","addEventListener","async","canvas","document","querySelector","width","CANVAS_WIDTH","height","CANVAS_HEIGHT","gl","getContext","console","warn","propertiesNode","terrainProgram","createProgram","default","waterProgram","sunProgram","terrainData","createTerrain","DETAILS_LEVEL","terrain","createBuffers","arrays","dudvTexture","loadTexture","normalMapTexture","refractionTexture","refractionFramebuffer","createFramebufferAndTexture","WATER_SIZE","reflectionTexture","reflectionFramebuffer","water","createWater","framebuffers","refraction","reflection","textures","dudv","normalMap","sun","createSun","properties","initProperties","initControls","on","renderWater","updateProperties","renderTerrain","useRefraction","useReflection","renderSun","e","cameraPosition","center","eye","nextDistance","inRange","dy","move","dx","proj","renderProperties","render","time","Date","now","start","_a","getSunPosition","sunPosition","rest","__rest","directionalLightVector","assign","drawScene","requestAnimationFrame","SIZE","innerWidth","innerHeight","opts","buffers","position","createBuffer","ARRAY_BUFFER","colors","indices","ELEMENT_ARRAY_BUFFER","Uint16Array","normal","normals","texture","size","createMatrices","flip","far","projection","view","model","perspective","lookAt","props","waterHeight","clipLevel","translate","useProgram","program","bindBuffer","attributes","uniformMatrix4fv","uniforms","uniform3fv","uniform1f","clipZ","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","drawElements","TRIANGLES","UNSIGNED_SHORT","disable","updateRefractionTexture","bindFramebuffer","FRAMEBUFFER","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","updateReflectionTexture","textureCoord","dudvOffset","uniform1i","Number","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","TEXTURE1","TEXTURE2","TEXTURE3","domeRadius","clearDepth","clearColor","DEPTH_TEST","depthFunc","LEQUAL","identity","transpose","invert","adjoint","determinant","rotate","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","fromQuat2","getTranslation","getScaling","getRotation","fromRotationTranslationScale","fromRotationTranslationScaleOrigin","fromQuat","frustum","perspectiveFromFieldOfView","ortho","targetTo","frob","multiplyScalar","multiplyScalarAndAdd","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","b3","v","rad","axis","b12","b20","b21","b22","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","translation","bw","aw","magnitude","mat","trace","S","sx","sy","sz","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","yx","zx","zy","left","right","bottom","top","near","rl","tb","nf","fovy","aspect","f","tan","Infinity","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","lr","bt","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","target","pow","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","src","maxHeight","createElement","image","Promise","resolve","reject","Image","onload","onerror","loadImage","ctx","drawImage","data","getImageData","u32","Uint32Array","levelHeight","heatmap","j","k","push","h","iw","ih","facesIndexes","faces","facesNormals","p1","p2","p3","events_1","elem","mousedown","ee","EventEmitter","pressed","pullKeys","emit","deltaY","preventDefault","movementX","movementY","this","_events","_maxListeners","undefined","isFunction","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","TypeError","type","er","handler","args","listeners","error","arguments","Error","err","context","slice","apply","addListener","listener","newListener","warned","once","fired","g","removeListener","list","splice","removeAllListeners","listenerCount","evlistener","emitter","DAY_SPEED","minutes","altitude","getAltitude","azimuth","getAzimuth","sunTime","DEFAULT_PROPERTIES","LOCALSTORAGE_KEY","arrToString","arr","from","map","toFixed","join","item","localStorage","getItem","JSON","parse","saveProperties","prepared","setItem","stringify","node","info","title","control","columns","body","innerHTML","tr","td","innerText","appendChild","createShader","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","url","createTexture","isPow2","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","vertextShaderSource","fragmentShaderSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributesCount","ACTIVE_ATTRIBUTES","uniformsCount","ACTIVE_UNIFORMS","getActiveAttrib","getAttribLocation","getActiveUniform","getUniformLocation","buffer","bufferData","STATIC_DRAW","attribute","numComponents","vertexAttribPointer","FLOAT","enableVertexAttribArray","framebuffer","createFramebuffer","renderbuffer","createRenderbuffer","TEXTURE_MAG_FILTER","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import Mat4 = require('gl-matrix/mat4');\r\nimport Vec3 = require('gl-matrix/vec3');\r\n\r\nimport terrainVertextShaderSource from './shaders/terrain.vertex.glsl';\r\nimport terrainFragmentShaderSource from './shaders/terrain.fragment.glsl';\r\nimport waterVertextShaderSource from './shaders/water.vertex.glsl';\r\nimport waterFragmentShaderSource from './shaders/water.fragment.glsl';\r\nimport sunVertextShaderSource from './shaders/sun.vertex.glsl';\r\nimport sunFragmentShaderSource from './shaders/sun.fragment.glsl';\r\nimport {createTerrain} from './create-terrain';\r\nimport {initControls} from './init-contol';\r\nimport {createWater} from './create-water';\r\nimport {createSun, getSunPosition} from './create-sun';\r\nimport {renderProperties, initProperties, saveProperties} from './program-properties';\r\nimport {createFramebufferAndTexture, createProgram, loadTexture, createBuffer, bindBuffer, inRange} from './utils';\r\n\r\nimport {ProgramProperties, BufferObject, Program} from './types';\r\n\r\nwindow.addEventListener('load', setup);\r\n\r\nconst SIZE = Math.min(window.innerWidth, window.innerHeight);\r\nconst CANVAS_WIDTH = SIZE\r\nconst CANVAS_HEIGHT = SIZE;\r\n\r\nconst WATER_SIZE = SIZE * 2;\r\n\r\nconst DETAILS_LEVEL = 5;\r\n\r\nasync function setup() {\r\n    const canvas = document.querySelector('canvas')!;\r\n    canvas.width = CANVAS_WIDTH;\r\n    canvas.height = CANVAS_HEIGHT;\r\n    const gl = canvas.getContext('experimental-webgl');\r\n    if (!gl) {\r\n        console.warn('Can not create webgl context');\r\n        return;\r\n    }\r\n\r\n    const propertiesNode = document.querySelector('[data-properties]') as HTMLTableElement;\r\n\r\n    const terrainProgram = createProgram(\r\n        gl,\r\n        terrainVertextShaderSource,\r\n        terrainFragmentShaderSource\r\n    );\r\n    const waterProgram = createProgram(\r\n        gl,\r\n        waterVertextShaderSource,\r\n        waterFragmentShaderSource\r\n    );\r\n    const sunProgram = createProgram(\r\n        gl,\r\n        sunVertextShaderSource,\r\n        sunFragmentShaderSource\r\n    )\r\n    \r\n    const terrainData = await createTerrain('heightmaps/mountain2.png', 500 / DETAILS_LEVEL, DETAILS_LEVEL);\r\n    const terrain = terrainData && createBuffers(gl, {\r\n        arrays: terrainData\r\n    });\r\n\r\n    const dudvTexture = await loadTexture(gl, 'textures/dudvmap.png');\r\n    const normalMapTexture = await loadTexture(gl, 'textures/normalmap.png');\r\n    const [\r\n        refractionTexture,\r\n        refractionFramebuffer\r\n    ] = createFramebufferAndTexture(gl, WATER_SIZE, WATER_SIZE);\r\n    const [\r\n        reflectionTexture,\r\n        reflectionFramebuffer\r\n    ] = createFramebufferAndTexture(gl, WATER_SIZE, WATER_SIZE);\r\n    const water = createBuffers(gl, {\r\n        arrays: createWater(),\r\n        framebuffers: {\r\n            refraction: refractionFramebuffer,\r\n            reflection: reflectionFramebuffer\r\n        },\r\n        textures: {\r\n            dudv: dudvTexture,\r\n            normalMap: normalMapTexture,\r\n            refraction: refractionTexture,\r\n            reflection: reflectionTexture\r\n        }\r\n    });\r\n\r\n    const sun = createBuffers(gl, {\r\n        arrays: createSun()\r\n    });\r\n\r\n    if (!water || !waterProgram || !terrainProgram || !terrain || !sunProgram) {\r\n        return;\r\n    }\r\n\r\n    const properties = initProperties();\r\n    const emitter = initControls(canvas);\r\n\r\n    emitter\r\n        .on('toggleRenderWater', () => {\r\n            properties.renderWater = !properties.renderWater;\r\n            updateProperties();\r\n        })\r\n        .on('toggleRenderTerrain', () => {\r\n            properties.renderTerrain = !properties.renderTerrain;\r\n            updateProperties();\r\n        })\r\n        .on('toggleRefraction', () => {\r\n            properties.useRefraction = !properties.useRefraction;\r\n            updateProperties();\r\n        })\r\n        .on('toggleReflection', () => {\r\n            properties.useReflection = !properties.useReflection;\r\n            updateProperties();\r\n        })\r\n        .on('toggleRenderSun', () => {\r\n            properties.renderSun = !properties.renderSun;\r\n            updateProperties();\r\n        })\r\n        .on('zoom', e => {\r\n            const {cameraPosition, center} = properties;\r\n            const eye = Vec3.create();\r\n            const distance = Vec3.distance(center, cameraPosition);\r\n            const nextDistance = inRange(distance + e.dy, 50, 1000);\r\n            Vec3.sub(eye, cameraPosition, center);\r\n            Vec3.scale(eye, eye, nextDistance / distance);\r\n            Vec3.add(cameraPosition, center, eye);\r\n            updateProperties();\r\n        })\r\n        .on('move', e => {\r\n            const move = Vec3.fromValues(e.dx, e.dy, 0);\r\n            const {cameraPosition, center} = properties;\r\n            Vec3.add(cameraPosition, cameraPosition, move);\r\n            Vec3.add(center, center, move);\r\n            updateProperties();\r\n        })\r\n        .on('moveCamera', e => {\r\n            const {cameraPosition, center} = properties;\r\n            const distance = Vec3.distance(center, cameraPosition);\r\n            const eye = Vec3.create();\r\n            Vec3.sub(eye, cameraPosition, center);\r\n            const proj = Vec3.clone(eye);\r\n            proj[2] = 0;\r\n            const angle = inRange(\r\n                Vec3.angle(eye, proj) + e.dy * 1e-2,\r\n                0.1,\r\n                Math.PI / 3\r\n            );\r\n            proj[2] = distance * Math.sin(angle);\r\n            Vec3.copy(eye, proj);\r\n            Vec3.rotateZ(eye, eye, [0, 0, 0], e.dx * 1e-2)\r\n            Vec3.add(cameraPosition, center, eye);\r\n            updateProperties();\r\n        })\r\n    \r\n    const updateProperties = () => {\r\n        // saveProperties(properties);\r\n        renderProperties(propertiesNode, properties);\r\n    }\r\n\r\n    function render() {\r\n        const time = Date.now() - properties.start;\r\n        const {sunPosition, ...rest} = getSunPosition(time);\r\n        const directionalLightVector = Vec3.create();\r\n        Vec3.negate(directionalLightVector, sunPosition);\r\n        Object.assign(properties, {\r\n            time,\r\n            sunPosition,\r\n            directionalLightVector,\r\n            ...rest\r\n        });\r\n        updateProperties();\r\n        drawScene({\r\n            gl: gl!,\r\n            terrainProgram: terrainProgram!,\r\n            waterProgram: waterProgram!,\r\n            sunProgram: sunProgram!,\r\n            properties,\r\n            terrain: terrain!,\r\n            water: water!,\r\n            sun\r\n        });\r\n        requestAnimationFrame(render);\r\n    }\r\n    \r\n    render();\r\n    updateProperties();\r\n}\r\n\r\nfunction createBuffers(\r\n    gl: WebGLRenderingContext,\r\n    opts: {\r\n        arrays: {\r\n            [key: string]: number[]\r\n        },\r\n        textures?: BufferObject['textures'],\r\n        framebuffers?: BufferObject['framebuffers']\r\n    }\r\n): BufferObject {\r\n    const {arrays, textures = {}, framebuffers = {}} = opts;\r\n    return {\r\n        buffers: {\r\n            position: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.position)),\r\n            colors: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.colors)),\r\n            indices: createBuffer(gl, gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(arrays.indices)),\r\n            normal: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.normals)),\r\n            texture: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.texture))\r\n        },\r\n        textures,\r\n        framebuffers,\r\n        size: arrays.indices.length\r\n    }\r\n}\r\n\r\nfunction createMatrices(properties: ProgramProperties, flip: boolean = false, far: number = 2000) {\r\n    const projection = Mat4.create();\r\n    const view = Mat4.create();\r\n    const model = Mat4.create();\r\n    let eye: Vec3;\r\n    if (flip) {\r\n        eye = Vec3.clone(properties.cameraPosition);\r\n        Vec3.sub(eye, eye, properties.center);\r\n        eye[2] = -eye[2];\r\n        Vec3.add(eye, eye, properties.center);\r\n    } else {\r\n        eye = properties.cameraPosition;\r\n    }\r\n    Mat4.perspective(projection, 45 * Math.PI / 180, CANVAS_WIDTH / CANVAS_HEIGHT, 0.1, far);\r\n    Mat4.lookAt(view, eye, properties.center, [0, 0, 1]);\r\n    return {model, projection, view};\r\n}\r\n\r\nfunction drawScene(props: {\r\n    gl: WebGLRenderingContext,\r\n    terrainProgram: Program,\r\n    waterProgram: Program,\r\n    sunProgram: Program,\r\n    properties: ProgramProperties,\r\n    terrain: BufferObject,\r\n    water: BufferObject,\r\n    sun: BufferObject\r\n}) {\r\n    \r\n    const waterHeight = 50 / DETAILS_LEVEL;\r\n    const {gl, terrainProgram, waterProgram, sunProgram, properties, terrain, water, sun} = props;\r\n\r\n    const renderTerrain = (clipLevel: -1 | 1 | 0, flip: boolean) => {\r\n        if (!properties.renderTerrain) {\r\n            return;\r\n        }\r\n        const {projection, model, view} = createMatrices(properties, flip);\r\n        // reflection\r\n        if (flip) {\r\n            Mat4.translate(model, model, [0, 0,  clipLevel * waterHeight * 2]);\r\n        }\r\n\r\n        gl.useProgram(terrainProgram.program);\r\n        bindBuffer(gl, terrain.buffers.position, terrainProgram.attributes.position, 3);\r\n        bindBuffer(gl, terrain.buffers.normal, terrainProgram.attributes.normal, 3);\r\n        bindBuffer(gl, terrain.buffers.colors, terrainProgram.attributes.colors, 4);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, terrain.buffers.indices);\r\n\r\n        gl.uniformMatrix4fv(\r\n            terrainProgram.uniforms.projection,\r\n            false,\r\n            projection\r\n        );\r\n        gl.uniformMatrix4fv(\r\n            terrainProgram.uniforms.model,\r\n            false,\r\n            model\r\n        );\r\n        gl.uniformMatrix4fv(\r\n            terrainProgram.uniforms.view,\r\n            false,\r\n            view\r\n        );\r\n\r\n        gl.uniform3fv(terrainProgram.uniforms.directionalLightVector, properties.directionalLightVector);\r\n        gl.uniform1f(terrainProgram.uniforms.clipZ, waterHeight);\r\n        gl.uniform1f(terrainProgram.uniforms.clipLevel, clipLevel);\r\n\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.drawElements(gl.TRIANGLES, terrain.size, gl.UNSIGNED_SHORT, 0);\r\n        gl.disable(gl.BLEND);\r\n    }\r\n\r\n    const updateRefractionTexture = () => {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, water.framebuffers.refraction);\r\n        gl.viewport(0, 0, WATER_SIZE, WATER_SIZE);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        renderTerrain(1, false);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n    const updateReflectionTexture = () => {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, water.framebuffers.reflection);\r\n        gl.viewport(0, 0, WATER_SIZE, WATER_SIZE);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        renderTerrain(-1, true);\r\n        renderSun();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n\r\n    const renderWater = () => {\r\n        if (!properties.renderWater) {\r\n            return;\r\n        }\r\n        const {view, model, projection} = createMatrices(properties);\r\n        Mat4.translate(model, model, [0, 0, waterHeight]);\r\n        Mat4.scale(model, model, [WATER_SIZE, WATER_SIZE, 1]);\r\n\r\n        gl.useProgram(waterProgram.program);\r\n        bindBuffer(gl, water.buffers.position, waterProgram.attributes.position, 3);\r\n        bindBuffer(gl, water.buffers.texture, waterProgram.attributes.textureCoord, 2);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, water.buffers.indices);\r\n\r\n        gl.uniform1f(waterProgram.uniforms.dudvOffset, (properties.time / 1000 * 0.06) % 1);\r\n        gl.uniform1i(waterProgram.uniforms.useRefraction, Number(properties.useRefraction));\r\n        gl.uniform1i(waterProgram.uniforms.useReflection, Number(properties.useReflection));\r\n        gl.uniform3fv(waterProgram.uniforms.center, properties.center);\r\n        gl.uniform3fv(waterProgram.uniforms.cameraPosition, properties.cameraPosition);\r\n        gl.uniform3fv(waterProgram.uniforms.directionalLightVector, properties.directionalLightVector);\r\n        gl.uniformMatrix4fv(\r\n            waterProgram.uniforms.projection,\r\n            false,\r\n            projection\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            waterProgram.uniforms.model,\r\n            false,\r\n            model\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            waterProgram.uniforms.view,\r\n            false,\r\n            view\r\n        );\r\n\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, water.textures.dudv);\r\n        gl.uniform1i(waterProgram.uniforms.dudvTexture, 0);\r\n\r\n        gl.activeTexture(gl.TEXTURE1);\r\n        gl.bindTexture(gl.TEXTURE_2D, water.textures.normalMap);\r\n        gl.uniform1i(waterProgram.uniforms.normalMapTexture, 1);\r\n\r\n        gl.activeTexture(gl.TEXTURE2);\r\n        gl.bindTexture(gl.TEXTURE_2D, water.textures.refraction);\r\n        gl.uniform1i(waterProgram.uniforms.refractionTexture, 2);\r\n\r\n        gl.activeTexture(gl.TEXTURE3);\r\n        gl.bindTexture(gl.TEXTURE_2D, water.textures.reflection);\r\n        gl.uniform1i(waterProgram.uniforms.reflectionTexture, 3);\r\n\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.drawElements(gl.TRIANGLES, water.size, gl.UNSIGNED_SHORT, 0);\r\n        gl.disable(gl.BLEND);\r\n    }\r\n\r\n    function renderSun() {\r\n        if (!properties.renderSun) {\r\n            return;\r\n        }\r\n\r\n        const domeRadius = 2000;\r\n        const {projection, view, model} = createMatrices(properties, false, domeRadius * 2);\r\n        Mat4.scale(model, model, [domeRadius, domeRadius, domeRadius]);\r\n\r\n        gl.useProgram(sunProgram.program);\r\n\r\n        bindBuffer(gl, sun.buffers.position, sunProgram.attributes.position, 3);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sun.buffers.indices);\r\n\r\n        gl.uniform1f(\r\n            sunProgram.uniforms.domeRadius,\r\n            domeRadius\r\n        );\r\n\r\n        gl.uniform3fv(\r\n            sunProgram.uniforms.sunPosition,\r\n            properties.sunPosition\r\n        );\r\n        gl.uniformMatrix4fv(\r\n            sunProgram.uniforms.projection,\r\n            false,\r\n            projection\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            sunProgram.uniforms.view,\r\n            false,\r\n            view\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            sunProgram.uniforms.model,\r\n            false,\r\n            model\r\n        );\r\n\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.drawElements(gl.TRIANGLES, sun.size, gl.UNSIGNED_SHORT, 0);\r\n        gl.disable(gl.BLEND);\r\n    }\r\n\r\n    gl.clearDepth(1.0);\r\n    gl.clearColor(0.53, 0.8, 0.98, 1.);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);   \r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    if (properties.renderWater) {\r\n        updateReflectionTexture();\r\n        updateRefractionTexture();\r\n    }\r\n\r\n    gl.viewport(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n    renderSun();\r\n    renderTerrain(0, false);\r\n    renderWater();\r\n}\r\n","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","module.exports = \"attribute vec4 position;\\r\\nattribute vec3 normal;\\r\\nattribute vec4 colors;\\r\\n\\r\\nuniform mat4 view;\\r\\nuniform mat4 model;\\r\\nuniform mat4 projection;\\r\\nuniform vec3 directionalLightVector;\\r\\nuniform float clipZ;\\r\\nuniform float clipLevel;\\r\\n\\r\\nvarying highp vec3 vLighting;\\r\\nvarying lowp vec2 vTextureCoord;\\r\\nvarying lowp vec4 fragmentColor;\\r\\nvarying float shouldClip;\\r\\n\\r\\nvoid main() {\\r\\n  // light\\r\\n  //highp vec3 ambientLight = vec3(0.3, 0.3, 0.3);\\r\\n  highp vec3 ambientLight = vec3(0, 0, 0);\\r\\n  highp vec3 directionalLightColor = vec3(1, 1, 1);\\r\\n  highp vec3 directionalVector = normalize(directionalLightVector);\\r\\n\\r\\n  highp vec4 transformedNormal = vec4(normal, 1.0);\\r\\n  highp float directional = max(dot(transformedNormal.xyz, directionalVector), 0.0);\\r\\n  vLighting = ambientLight + (directionalLightColor * directional);\\r\\n\\r\\n  gl_Position = projection * view * model * position;\\r\\n\\r\\n  fragmentColor = colors;\\r\\n  if (clipLevel == 1.0) {\\r\\n    shouldClip = position.z > clipZ ? 1.0 : 0.0;\\r\\n  } else if (clipLevel == -1.0) {\\r\\n    shouldClip = position.z < clipZ ? 1.0 : 0.0;\\r\\n  } else {\\r\\n    shouldClip = 0.0;\\r\\n  }\\r\\n}\"","module.exports = \"varying highp vec3 vLighting;\\r\\nvarying highp float shouldClip;\\r\\nvarying lowp vec4 fragmentColor;\\r\\n\\r\\nconst lowp vec4 nothingColor = vec4(0.0, 0.0, 0.0, 0.0);\\r\\nconst lowp vec4 grassColor = vec4(0.12, 0.43, 0.02, 1.0);\\r\\nconst lowp vec4 snowColor = vec4(1.0);\\r\\nconst lowp vec4 groundColor = vec4(0.85, 0.84, 0.79, 1.0);\\r\\n\\r\\nvoid main() {\\r\\n  if (shouldClip == 1.0) {\\r\\n    discard;\\r\\n  }\\r\\n  lowp float x = fragmentColor.x;\\r\\n  lowp float groundGrassMixFactor = smoothstep(0.1, 0.2, x);\\r\\n  lowp float grassSnowMixFactor = smoothstep(0.7, 0.8, x);\\r\\n  lowp float nothingGroundMixFactor = smoothstep(0.00, 0.015, x);\\r\\n  lowp vec4 color = mix(groundColor, grassColor, groundGrassMixFactor);\\r\\n  color = mix(color, snowColor, grassSnowMixFactor);\\r\\n  color = mix(nothingColor, color, nothingGroundMixFactor);\\r\\n\\r\\n  gl_FragColor = vec4(color.rgb * vLighting, color.a);\\r\\n}\\r\\n\"","module.exports = \"attribute vec4 position;\\r\\nattribute vec2 textureCoord;\\r\\n\\r\\nuniform mat4 view;\\r\\nuniform mat4 model;\\r\\nuniform mat4 projection;\\r\\nuniform vec3 cameraPosition;\\r\\n\\r\\nvarying highp vec2 vTextureCoord;\\r\\nvarying highp vec4 clipSpace;\\r\\nvarying highp vec3 fromFragmentToCamera;\\r\\n\\r\\nconst lowp float tiling = 10.0;\\r\\n\\r\\nvoid main() {\\r\\n    vec4 worldPosition = model * position;\\r\\n    gl_Position = clipSpace = projection * view * worldPosition;\\r\\n\\r\\n    fromFragmentToCamera = cameraPosition - worldPosition.xyz;\\r\\n    vTextureCoord = textureCoord * tiling;\\r\\n}\"","module.exports = \"varying lowp vec2 vTextureCoord;\\r\\nvarying lowp vec4 clipSpace;\\r\\nvarying lowp vec3 fromFragmentToCamera;\\r\\n\\r\\nuniform sampler2D dudvTexture;\\r\\nuniform sampler2D normalMapTexture;\\r\\nuniform sampler2D refractionTexture;\\r\\nuniform sampler2D reflectionTexture;\\r\\nuniform lowp float dudvOffset;\\r\\nuniform int useRefraction;\\r\\nuniform int useReflection;\\r\\nuniform lowp vec3 directionalLightVector;\\r\\n\\r\\nconst lowp float waterDistortionStrenth = 0.03;\\r\\nconst lowp float fresnelStrength = 1.5;\\r\\nconst lowp float waterReflectivity = 0.5;\\r\\nconst lowp vec3 sunlightColor = vec3(1.0, 1.0, 1.0);\\r\\nconst lowp vec4 shallowWaterColor =  vec4(0.0, 0.1, 0.3, 1.0);\\r\\n// const lowp vec4 deepWaterColor = vec4(0.0, 0.1, 0.2, 1.0);\\r\\nconst lowp float shineDamper = 20.0;\\r\\n\\r\\nvoid main() {\\r\\n    // distortion\\r\\n    lowp vec2 distortedTexCoords = texture2D(dudvTexture, vec2(vTextureCoord.x, vTextureCoord.y + dudvOffset)).xy * 0.1;\\r\\n    distortedTexCoords = vTextureCoord + vec2(distortedTexCoords.x + dudvOffset, distortedTexCoords.y);\\r\\n\\r\\n    lowp vec2 totalDistortion = (texture2D(dudvTexture, distortedTexCoords).xy * 2.0 - 1.0) * waterDistortionStrenth;\\r\\n\\r\\n    // base refract/reflect texture coordinates\\r\\n    lowp vec2 ndc = (clipSpace.xy / clipSpace.w) / 2.0 + 0.5;\\r\\n    lowp vec2 refractTexCoords = vec2(ndc.x, +ndc.y);\\r\\n    lowp vec2 reflectTexCoords = vec2(ndc.x, 1.0-ndc.y);\\r\\n\\r\\n    // refractive factor\\r\\n    lowp vec3 toCamera = normalize(fromFragmentToCamera);\\r\\n    lowp vec4 normalMapColor = texture2D(normalMapTexture, distortedTexCoords);\\r\\n    lowp vec3 normal = vec3(\\r\\n      normalMapColor.r * 2.0 - 1.0,\\r\\n      normalMapColor.g * 2.0 - 1.0,\\r\\n      normalMapColor.b * 2.0 - 1.0\\r\\n    );\\r\\n    normal = normalize(normal);\\r\\n    lowp float refractiveFactor = dot(toCamera, normal);\\r\\n    refractiveFactor = pow(refractiveFactor, fresnelStrength);\\r\\n\\r\\n    // puting all together\\r\\n    refractTexCoords += totalDistortion;\\r\\n    reflectTexCoords += totalDistortion;\\r\\n    // refractTexCoords = clamp(refractTexCoords, 0.001, 0.999);\\r\\n    // reflectTexCoords.x = clamp(reflectTexCoords.x, 0.001, 0.999);\\r\\n    // reflectTexCoords.y = clamp(reflectTexCoords.y, -0.999, -0.001);\\r\\n\\r\\n    // lighs\\r\\n    lowp vec3 reflectedLight = reflect(normalize(directionalLightVector), normal);\\r\\n    lowp float specular = max(dot(reflectedLight, toCamera), 0.0);\\r\\n    specular = pow(specular, shineDamper);\\r\\n    lowp vec3 specularHighlights = sunlightColor * specular * waterReflectivity;\\r\\n\\r\\n    // color\\r\\n    lowp vec4 refractColor = texture2D(refractionTexture, refractTexCoords);\\r\\n    lowp vec4 reflectColor = texture2D(reflectionTexture, reflectTexCoords);\\r\\n\\r\\n    if (useReflection == 1 && useRefraction == 1) {\\r\\n      gl_FragColor = mix(reflectColor, refractColor, refractiveFactor);\\r\\n    } else if (useReflection == 1) {\\r\\n      gl_FragColor = reflectColor;\\r\\n    } else if (useRefraction == 1) {\\r\\n      gl_FragColor = refractColor;\\r\\n    }\\r\\n    gl_FragColor = mix(gl_FragColor, shallowWaterColor, 0.2);\\r\\n\\r\\n    gl_FragColor = gl_FragColor + vec4(specularHighlights, 0.0);\\r\\n}\\r\\n\"","module.exports = \"attribute vec4 position;\\r\\n\\r\\nuniform lowp mat4 view;\\r\\nuniform lowp mat4 model;\\r\\nuniform lowp mat4 projection;\\r\\n\\r\\nvarying lowp vec4 worldPosition;\\r\\n\\r\\nvoid main() {\\r\\n    worldPosition = model * position;\\r\\n    gl_Position = projection * view * worldPosition;\\r\\n}\"","module.exports = \"uniform lowp float domeRadius;\\r\\nuniform lowp vec3 sunPosition;\\r\\n\\r\\nvarying lowp vec4 worldPosition;\\r\\n\\r\\nconst lowp float PI = 3.1415926535897932384626433832795;\\r\\nconst lowp float PI_2 = 1.57079632679489661923;\\r\\nconst lowp vec4 daySkyColor = vec4(0.67, 0.96, 0.98, 1.00);\\r\\nconst lowp vec4 nigthSkyColor = vec4(0.0, 0.0, 0.0, 1.0);\\r\\nconst lowp vec4 sunColorInner = vec4(0.89, 0.40, 0.00, 1.00);\\r\\nconst lowp vec4 sunColorOuter = vec4(0.95, 0.77, 0.35, 1.00);\\r\\n\\r\\n\\r\\nvoid main() {\\r\\n    lowp float sunSize = 0.1 * 700.0;\\r\\n    lowp float sunToFragment = distance(sunPosition * domeRadius, worldPosition.xyz);\\r\\n    lowp float colorFactor = smoothstep(0.0, sunSize, pow(sunToFragment, 1.0));\\r\\n    lowp float alpha = 0.5 - atan((sunToFragment - sunSize) / domeRadius) / PI;\\r\\n    lowp vec4 skyColor = mix(\\r\\n        daySkyColor,\\r\\n        nigthSkyColor,\\r\\n        smoothstep(1.0, 0.0, sunPosition.z)\\r\\n    );\\r\\n\\r\\n    lowp vec4 sunColor = mix(sunColorInner, sunColorOuter, colorFactor);\\r\\n\\r\\n    gl_FragColor = mix(skyColor, sunColor, alpha);\\r\\n}\"","import Vec3 = require('gl-matrix/vec3');\r\n\r\nexport async function createTerrain(src: string, maxHeight: number, size: number) {\r\n    const canvas = document.createElement('canvas');\r\n    const image = await loadImage(src);\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) {\r\n        return;\r\n    }\r\n    ctx.drawImage(image, 0, 0);\r\n    const {data} = ctx.getImageData(0, 0, image.width, image.height);\r\n    const u32 = new Uint32Array(data)\r\n    const levelHeight = 256 / maxHeight;\r\n\r\n    const width = Math.floor(image.width / size);\r\n    const height = Math.floor(image.height / size);\r\n    const heatmap = new Float32Array(width * height);\r\n    let max = 0;\r\n\r\n    for (let i = 0; i < height; i ++) {\r\n        for (let j = 0; j < width; j ++) {\r\n            let s = 0;\r\n            for (let k = 0; k < size; k ++) {\r\n                for (let l = 0; l < size; l ++) {\r\n                    s += u32[(i * size * image.width + j * size + k * size + l) * 4]\r\n                }\r\n            }\r\n            const v = s / size / size / levelHeight;\r\n            heatmap[i * width + j] = v;\r\n            if (max < v) {\r\n                max = v;\r\n            }\r\n        }\r\n    }\r\n\r\n    const position = [];\r\n    const indices = [];\r\n    const colors = [];\r\n    const normals = [];\r\n    const texture = [];\r\n\r\n    for (let i = 0; i < height; i ++) {\r\n        for (let j = 0; j < width; j++) {\r\n            const k = i * width + j\r\n            const c = heatmap[k] / max;\r\n            position.push(\r\n                j - width / 2,\r\n                i - height / 2,\r\n                heatmap[k]\r\n            );\r\n            colors.push(c, c, c, 1)\r\n\r\n            if ((i !== height - 1) && (j !== width - 1)) {\r\n                indices.push(\r\n                    k,\r\n                    k + width,\r\n                    k + 1,\r\n                    k + 1,\r\n                    k + width,\r\n                    k + width + 1,\r\n                );\r\n            }\r\n            texture.push(j / width, i / height);\r\n            \r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < position.length / 3; i ++) {\r\n        const w = width;\r\n        const h = height;\r\n        const iw = i % w;\r\n        const ih = ~~(i / w);\r\n        const facesIndexes = [\r\n            iw > 0 && ih > 0 && [\r\n                i - w,\r\n                i - 1,\r\n                i,\r\n            ],\r\n            iw + 1 < w && ih > 0 && [\r\n                i - w,\r\n                i,\r\n                i - w + 1,\r\n            ],\r\n            iw + 1 < w && ih > 0 && [\r\n                i - w + 1,\r\n                i,\r\n                i + 1,\r\n            ],\r\n            iw > 0 && ih < h && [\r\n                i - 1,\r\n                i + w - 1,\r\n                i,\r\n            ],\r\n            iw > 0 && ih < h && [\r\n                i,\r\n                i + w - 1,\r\n                i + w,\r\n            ],\r\n            iw + 1 < w && ih < h && [\r\n                i,\r\n                i + w,\r\n                i + 1,\r\n            ],\r\n        ];\r\n        const faces = [];\r\n        const facesNormals = [];\r\n\r\n        for (let j = 0; j < facesIndexes.length; j ++) {\r\n            const f = facesIndexes[j];\r\n            for (let k = 0; k < 3; k ++) {\r\n                if (f) {\r\n                    faces.push(\r\n                        position[f[k] * 3],\r\n                        position[f[k] * 3 + 1],\r\n                        position[f[k] * 3 + 2],\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        for (let j = 0; j < faces.length / 9; j ++) {\r\n            const p1 = Vec3.fromValues(\r\n                faces[j * 9 + 0],\r\n                faces[j * 9 + 1],\r\n                faces[j * 9 + 2]\r\n            );\r\n            const p2 = Vec3.fromValues(\r\n                faces[j * 9 + 3],\r\n                faces[j * 9 + 4],\r\n                faces[j * 9 + 5]\r\n            );\r\n            const p3 = Vec3.fromValues(\r\n                faces[j * 9 + 6],\r\n                faces[j * 9 + 7],\r\n                faces[j * 9 + 8]\r\n            );\r\n            ////\r\n            // U = p2 - p1\r\n            // V = p3 - p1\r\n            // N = U x V\r\n            ////\r\n            Vec3.subtract(p2, p2, p1)\r\n            Vec3.subtract(p3, p3, p1)\r\n            Vec3.cross(p2, p2, p3)\r\n            Vec3.normalize(p2, p2);\r\n            facesNormals.push(p2);\r\n        }\r\n\r\n        const n = Vec3.fromValues(0, 0, 0);\r\n        for (let j = 0; j < facesNormals.length; j ++) {\r\n            Vec3.add(n, n, facesNormals[j]);\r\n        }\r\n        Vec3.normalize(n, n);\r\n\r\n        normals.push(n[0], n[1], n[2]);\r\n    }\r\n\r\n    return {\r\n        position,\r\n        indices,\r\n        colors,\r\n        normals,\r\n        texture,\r\n    }\r\n}\r\n\r\nfunction loadImage(src: string): Promise<HTMLImageElement> {\r\n    return new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.src = src;\r\n        image.onload = () => resolve(image);\r\n        image.onerror = reject;\r\n    })\r\n}","import {EventEmitter} from 'events';\r\n\r\nexport function initControls(elem: HTMLElement) {\r\n    let mousedown = false;\r\n    const ee = new EventEmitter();\r\n    const pressed: {[key: string]: boolean} = {};\r\n    const pullKeys = () => {\r\n        const s = 0.01;\r\n        let dx = 0;\r\n        let dy = 0;\r\n\r\n        if (pressed.w && !pressed.s) {\r\n            dy = 1;\r\n        } else if (pressed.s && !pressed.w) {\r\n            dy = -1\r\n        }\r\n\r\n        if (pressed.a && !pressed.d) {\r\n            dx = -1;\r\n        } else if (pressed.d && !pressed.a) {\r\n            dx = 1;\r\n        }\r\n\r\n        if (dx || dy) {\r\n            ee.emit('moveCamera', {dx, dy});\r\n        }\r\n\r\n        requestAnimationFrame(pullKeys);\r\n    }\r\n    pullKeys();\r\n\r\n    elem.addEventListener('wheel', e => {\r\n        const {deltaY: dy} = e;\r\n        if (dy) {\r\n            ee.emit('zoom', {\r\n                dy: dy / Math.abs(dy) * 10\r\n            });\r\n            e.preventDefault();\r\n        }\r\n    })\r\n    window.addEventListener('keypress', e => {\r\n        switch (e.key) {\r\n            case '1':\r\n                ee.emit('toggleRenderTerrain');\r\n                break;\r\n            case '2':\r\n                ee.emit('toggleRenderWater');\r\n                break;\r\n            case '3':\r\n                ee.emit('toggleRefraction');\r\n                break;\r\n            case '4':\r\n                ee.emit('toggleReflection');\r\n                break;\r\n            case '5':\r\n                ee.emit('toggleRenderSun');\r\n                break;\r\n            default:\r\n                pressed[e.key] = true;\r\n        }\r\n    });\r\n    window.addEventListener('keyup', e => {\r\n        pressed[e.key] = false;\r\n    })\r\n\r\n    elem.addEventListener('mousedown', () => {\r\n        mousedown = true;\r\n    })\r\n    window.addEventListener('mouseup', () => {\r\n        mousedown = false;\r\n    })\r\n    window.addEventListener('mousemove', e => {\r\n        const {movementX, movementY} = e;\r\n        if (mousedown) {\r\n            ee.emit('moveCamera', {dx: -movementX, dy: movementY})\r\n        }\r\n    })\r\n    return ee;\r\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","export function createWater() {\r\n    const position = [\r\n        -0.5, -0.5, 0,\r\n        +0.5, -0.5, 0,\r\n        -0.5, +0.5, 0,\r\n        +0.5, +0.5, 0,\r\n    ];\r\n    const indices = [\r\n        0, 2, 1,\r\n        1, 2, 3\r\n    ];\r\n    const texture = [\r\n        0, 0,\r\n        1, 0,\r\n        0, 1,\r\n        1, 1\r\n    ];\r\n\r\n    return {position, indices, texture};\r\n}","import Vec3 = require('gl-matrix/vec3');\r\n\r\nconst {cos, sin, tan, PI} = Math;\r\n\r\nexport function createSun() {\r\n    const c = 50;\r\n    const position = [];\r\n    const indices = [];\r\n\r\n    for (let i = 0; i <= c; i ++) {\r\n        const b = PI / c * i - PI / 2;\r\n        for (let j = 0; j < c; j ++) {\r\n            const a = PI * 2 / c * j;\r\n            const x = cos(a) * cos(b);\r\n            const y = sin(a) * cos(b);\r\n            const z = sin(b);\r\n            const k = i * c + j;\r\n            position.push(x, y, z);\r\n            if (i === c) {\r\n                continue;\r\n            }\r\n            if (j === c - 1) {\r\n                indices.push(\r\n                    i * c, k + c, k,\r\n                    k + c, k + 1, i * c\r\n                );\r\n            } else {\r\n                indices.push(\r\n                    k, k + 1, k + c,\r\n                    k + 1, k + c, k + c + 1\r\n                );\r\n            }\r\n        }\r\n    }\r\n    \r\n    return {position, indices};\r\n}\r\n\r\n\r\n\r\n/**\r\n * @see ./bin/sun-positon-regression.js\r\n */\r\nfunction getAzimuth(t: number) {\r\n    return 7.344052639206152e-8 * t - 0.1829595519336553;\r\n}\r\nfunction getAltitude(t: number) {\r\n    return tan(-4.83049e-16 * t * t + 4.21414e-8 * t - 0.420437);\r\n}\r\n\r\nconst DAY_SPEED = 2e-3;\r\n\r\nexport function getSunPosition(n: number) {\r\n    const t = (n * DAY_SPEED) % 24 * 3600 * 1000;\r\n    const minutes = Math.ceil(t / 60 / 1000);\r\n    const m = minutes % 60;\r\n    const h = Math.floor(minutes / 60);\r\n    const altitude = getAltitude(t) / 2;\r\n    const azimuth = getAzimuth(t);\r\n    const x = cos(altitude) * cos(azimuth);\r\n    const y = cos(altitude) * sin(azimuth);\r\n    const z = sin(altitude);\r\n    return {\r\n        sunTime: `${h}:${m}`,\r\n        altitude,\r\n        azimuth,\r\n        sunPosition: Vec3.fromValues(x, -y, z)\r\n    };\r\n}","import Vec3 = require('gl-matrix/vec3');\r\nimport {ProgramProperties} from './types';\r\n\r\nconst DEFAULT_PROPERTIES: ProgramProperties = {\r\n    center: Vec3.fromValues(0, 0, 0),\r\n    cameraPosition: Vec3.fromValues(678, 115, 69),\r\n\r\n    directionalLightVector: Vec3.fromValues(0, 0, -1),\r\n    sunPosition: Vec3.fromValues(0, 0, -1),\r\n    start: Date.now(),\r\n    time: 0,\r\n    renderWater: true,\r\n    renderTerrain: true,\r\n    useReflection: true,\r\n    useRefraction: true,\r\n    renderSun: true\r\n};\r\nconst LOCALSTORAGE_KEY = 'wp-program-params';\r\n\r\nconst arrToString = (arr: Float32Array) => {\r\n    return Array.from(arr)\r\n        .map(i => {\r\n            const sign = i > 0 ? '+' : '-';\r\n            return sign + Math.abs(i).toFixed(1)\r\n        })\r\n        .join(', ')\r\n}\r\n\r\nexport function initProperties(): ProgramProperties {\r\n    const item = localStorage.getItem(LOCALSTORAGE_KEY);\r\n    const properties = item ?\r\n        JSON.parse(item) :\r\n        DEFAULT_PROPERTIES;\r\n    return {\r\n        ...properties,\r\n        start: Date.now()\r\n    }\r\n}\r\n\r\nexport function saveProperties(properties: ProgramProperties) {\r\n    const prepared = {\r\n        ...properties,\r\n        center: Array.from(properties.center),\r\n        cameraPosition: Array.from(properties.cameraPosition),\r\n    }\r\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(prepared));\r\n}\r\n\r\nexport function renderProperties(node: HTMLTableElement, properties: ProgramProperties) {\r\n\r\n    const info = [\r\n        {\r\n            title: 'sun position',\r\n            value: arrToString(properties.sunPosition)\r\n        },\r\n        {\r\n            title: 'sun time',\r\n            value: properties.sunTime\r\n        },\r\n        {\r\n            title: 'altitude',\r\n            value: (properties.altitude! * 180 / Math.PI).toFixed(2)\r\n        },\r\n        {\r\n            title: 'azimuth',\r\n            value: (properties.azimuth! * 180 / Math.PI).toFixed(2)\r\n        },\r\n        {\r\n            title: 'camera',\r\n            control: 'a d w s wheel mouse',\r\n            value: arrToString(properties.cameraPosition)\r\n        },\r\n        {\r\n            title: 'terrain',\r\n            control: '1',\r\n            value: properties.renderTerrain\r\n        },\r\n        {\r\n            title: 'water',\r\n            control: '2',\r\n            value: properties.renderWater\r\n        },\r\n        {\r\n            title: 'use refraction',\r\n            control: '3',\r\n            value: properties.useRefraction\r\n        },\r\n        {\r\n            title: 'use reflection',\r\n            control: '4',\r\n            value: properties.useReflection\r\n        },\r\n        {\r\n            title: 'render sun disk',\r\n            control: '5',\r\n            value: properties.renderSun\r\n        },\r\n    ];\r\n    const columns = ['title', 'control', 'value'];\r\n    const body = node.querySelector('tbody')!;\r\n    body.innerHTML = '';\r\n\r\n    info.forEach((item: any) => {\r\n        const tr = document.createElement('tr');\r\n        columns.forEach(key => {\r\n            const td = document.createElement('td');\r\n            td.innerText = key in item ? item[key] : '';\r\n            tr.appendChild(td);\r\n        })\r\n        body.appendChild(tr);\r\n    })\r\n}","import {Program} from './types';\r\n\r\nfunction createShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n    const shader = gl.createShader(type);\r\n    if (!shader) {\r\n        return null;\r\n    }\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        console.warn(gl.getShaderInfoLog(shader));\r\n        console.warn(source);\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    return shader;\r\n}\r\n\r\n\r\nexport async function loadTexture(gl: WebGLRenderingContext, url: string) {\r\n    const image: HTMLImageElement = await new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.src = url;\r\n        image.onload = () => resolve(image);\r\n        image.onerror = reject;\r\n    });\r\n    const texture = gl.createTexture();\r\n    const isPow2 = (n: number) => (n & (n - 1)) === 0;\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D, 0, gl.RGBA,\r\n        1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,\r\n        new Uint8Array([0, 0, 255, 255])\r\n    );\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D, 0, gl.RGBA,\r\n        gl.RGBA, gl.UNSIGNED_BYTE, image\r\n    );\r\n\r\n    if (isPow2(image.width) && isPow2(image.height)) {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    } else {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n\r\n    return texture as WebGLTexture;\r\n\r\n}\r\n\r\nexport function createProgram(\r\n    gl: WebGLRenderingContext,\r\n    vertextShaderSource: string,\r\n    fragmentShaderSource: string,\r\n): Program | null {\r\n\r\n    const vertexShader = createShader(gl,  gl.VERTEX_SHADER, vertextShaderSource);\r\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n    const program = gl.createProgram();\r\n\r\n    if (!program || !vertexShader || !fragmentShader) {\r\n        console.warn('Failed to create shader program');\r\n        return null;\r\n    }\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        console.warn(gl.getProgramInfoLog(program));\r\n        return null;\r\n    }\r\n    const attributes: Program['attributes'] = {};\r\n    const uniforms: Program['uniforms'] = {};\r\n    const attributesCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n    const uniformsCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n\r\n    for (let i = 0; i < attributesCount; i ++) {\r\n        const name = gl.getActiveAttrib(program, i)!.name;\r\n        attributes[name] = gl.getAttribLocation(program, name);\r\n    }\r\n    for (let i = 0; i < uniformsCount; i ++) {\r\n        const name = gl.getActiveUniform(program, i)!.name;\r\n        uniforms[name] = gl.getUniformLocation(program, name) as WebGLUniformLocation;\r\n    }\r\n\r\n    return {program, uniforms, attributes, gl};\r\n}\r\n\r\nexport function createBuffer(gl: WebGLRenderingContext, type: number, data: Float32Array | Uint16Array) {\r\n    const buffer = gl.createBuffer();\r\n    gl.bindBuffer(type, buffer);\r\n    gl.bufferData(\r\n        type,\r\n        data,\r\n        gl.STATIC_DRAW\r\n    );\r\n    return buffer as WebGLBuffer;\r\n}\r\n\r\nexport function bindBuffer(gl: WebGLRenderingContext, buffer: WebGLBuffer, attribute: number, numComponents: number) {\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.vertexAttribPointer(\r\n        attribute,\r\n        numComponents,\r\n        gl.FLOAT,\r\n        false,\r\n        0,\r\n        0\r\n    );\r\n    gl.enableVertexAttribArray(attribute);\r\n}\r\n\r\n\r\nexport function createFramebufferAndTexture(gl: WebGLRenderingContext, width: number, height: number) {\r\n    const texture = gl.createTexture() as WebGLTexture;\r\n    const framebuffer = gl.createFramebuffer() as WebGLFramebuffer;\r\n    const renderbuffer = gl.createRenderbuffer() as WebGLRenderbuffer;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D, 0, gl.RGBA,\r\n        width, height, 0,\r\n        gl.RGBA, gl.UNSIGNED_BYTE, null\r\n    );\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\r\n    gl.renderbufferStorage(\r\n        gl.RENDERBUFFER,\r\n        gl.DEPTH_COMPONENT16,\r\n        width,\r\n        height\r\n    );\r\n\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER,\r\n        gl.COLOR_ATTACHMENT0,\r\n        gl.TEXTURE_2D,\r\n        texture,\r\n        0\r\n    );\r\n    gl.framebufferRenderbuffer(\r\n        gl.FRAMEBUFFER,\r\n        gl.DEPTH_ATTACHMENT,\r\n        gl.RENDERBUFFER,\r\n        renderbuffer,\r\n    );\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    return [texture, framebuffer];\r\n}\r\n\r\n\r\nexport function inRange(v: number, min: number, max: number): number {\r\n    if (v < min) {\r\n        return min;\r\n    } else if (v > max) {\r\n        return max;\r\n    }\r\n    return v;\r\n}"],"sourceRoot":""}