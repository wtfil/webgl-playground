{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/gl-matrix/esm/common.js","webpack:///./node_modules/gl-matrix/esm/vec3.js","webpack:///./node_modules/gl-matrix/esm/mat4.js","webpack:///./src/utils.ts","webpack:///./src/create-sky.ts","webpack:///./src/index.ts","webpack:///./src/create-terrain.ts","webpack:///./src/shaders/terrain.vertex.glsl","webpack:///./src/shaders/terrain.fragment.glsl","webpack:///./src/init-contol.ts","webpack:///./node_modules/node-libs-browser/node_modules/events/events.js","webpack:///./src/create-water.ts","webpack:///./src/shaders/water.vertex.glsl","webpack:///./src/shaders/water.fragment.glsl","webpack:///./src/shaders/sky.vertex.glsl","webpack:///./src/shaders/sky.fragment.glsl","webpack:///./src/store.ts","webpack:///./node_modules/gl-matrix/esm/mat2.js","webpack:///./node_modules/gl-matrix/esm/mat2d.js","webpack:///./node_modules/gl-matrix/esm/mat3.js","webpack:///./node_modules/gl-matrix/esm/vec4.js","webpack:///./node_modules/gl-matrix/esm/quat.js","webpack:///./node_modules/gl-matrix/esm/quat2.js","webpack:///./node_modules/gl-matrix/esm/vec2.js","webpack:///./node_modules/gl-matrix/esm/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","EPSILON","ARRAY_TYPE","RANDOM","setMatrixArrayType","toRadian","equals","Float32Array","Array","Math","random","type","degree","PI","a","b","abs","max","clone","length","fromValues","copy","set","add","subtract","multiply","divide","ceil","floor","min","round","scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","bezier","transformMat4","transformMat3","transformQuat","rotateX","rotateY","rotateZ","angle","zero","str","exactEquals","sub","mul","div","dist","sqrDist","len","sqrLen","forEach","_common_js__WEBPACK_IMPORTED_MODULE_0__","out","x","y","z","sqrt","ax","ay","az","bx","by","bz","factorTimes2","factor1","factor2","factor3","factor4","inverseFactor","inverseFactorTimesTwo","zScale","cos","sin","w","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","tempA","tempB","cosine","acos","a0","a1","a2","b0","b1","b2","vec","stride","offset","count","fn","arg","identity","transpose","invert","adjoint","determinant","translate","rotate","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","fromQuat2","getTranslation","getScaling","getRotation","fromRotationTranslationScale","fromRotationTranslationScaleOrigin","fromQuat","frustum","perspective","perspectiveFromFieldOfView","ortho","lookAt","targetTo","frob","multiplyScalar","multiplyScalarAndAdd","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","b3","v","rad","axis","b12","b20","b21","b22","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","translation","bw","aw","magnitude","mat","trace","S","sx","sy","sz","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","yx","zx","zy","left","right","bottom","top","near","far","rl","tb","nf","fovy","aspect","f","tan","Infinity","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","lr","bt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","target","pow","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","Mat4","Vec3","createShader","gl","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","warn","getShaderInfoLog","deleteShader","createBuffer","data","buffer","bindBuffer","bufferData","STATIC_DRAW","loadTexture","async","url","image","Promise","resolve","reject","Image","src","onload","onerror","texture","createTexture","isPow2","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","createProgram","vertextShaderSource","fragmentShaderSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","Error","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","attributes","uniforms","attributesCount","ACTIVE_ATTRIBUTES","uniformsCount","ACTIVE_UNIFORMS","getActiveAttrib","getAttribLocation","getActiveUniform","getUniformLocation","createMatrices","opts","projection","view","model","camera","position","flip","attribute","numComponents","ARRAY_BUFFER","vertexAttribPointer","FLOAT","enableVertexAttribArray","bindArraysToBuffers","arrays","textures","framebuffers","buffers","colors","indices","ELEMENT_ARRAY_BUFFER","Uint16Array","normal","normals","size","createFramebufferAndTexture","framebuffer","createFramebuffer","renderbuffer","createRenderbuffer","bindFramebuffer","FRAMEBUFFER","TEXTURE_MAG_FILTER","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","inRange","utils_1","sky_vertex_glsl_1","__importDefault","sky_fragment_glsl_1","createRender","context","sun","state","domeRadius","useProgram","uniform1f","uniform3fv","sunPosition","sky","cameraPosition","uniformMatrix4fv","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","drawElements","TRIANGLES","UNSIGNED_SHORT","disable","BLEND","createArrays","j","k","push","pad2","st","slice","createSky","default","render","sunTimeToString","minutes","getSunPosition","altitude","getAltitude","azimuth","getAzimuth","directionalLightColor","directionalLightVector","lightAttenuation","create_terrain_1","init_contol_1","create_water_1","create_sky_1","store_1","window","addEventListener","canvas","document","querySelector","CANVAS_WIDTH","CANVAS_HEIGHT","getContext","terrain","createTerrain","heatmap","DETAILS_LEVEL","chunkSize","baseLevel","water","createWater","WATER_SIZE","getInitialState","emitter","initControls","on","e","app","active","visability","toggle","zoom","dy","moveCamera","rorateCamera","dx","moveSun","ds","requestAnimationFrame","updateWaterTime","autoMoveSun","props","terrainScale","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","visible","updateReflectionTexture","assign","clipDirection","clearColor","updateRefractionTexture","viewport","drawScene","SIZE","innerWidth","innerHeight","terrain_vertex_glsl_1","terrain_fragment_glsl_1","clipLevel","light","direction","color","maxHeight","createElement","loadImage","ctx","drawImage","getImageData","u32","Uint32Array","levelHeight","Number","isFinite","h","iw","ih","facesIndexes","faces","facesNormals","p1","p2","p3","events_1","elem","mousedown","pressed","Set","ee","EventEmitter","pullKeys","forward","sunTime","has","emit","onKeyPress","onWheel","deltaY","preventDefault","onKeyup","delete","onMouseDown","onMouseUp","onMouseMove","movementX","movementY","onContextMenu","onFocus","onBlur","tearDown","removeAllListeners","removeEventListener","this","_events","_maxListeners","undefined","isFunction","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","TypeError","er","handler","args","listeners","error","arguments","err","apply","addListener","listener","newListener","warned","once","fired","g","removeListener","list","splice","listenerCount","evlistener","water_vertex_glsl_1","water_fragment_glsl_1","createUpdateReflectionTexture","renderScene","reflection","createUpdateRefractionTexture","refraction","activeTexture","TEXTURE0","dudv","uniform1i","dudvTexture","TEXTURE1","normalMap","normalMapTexture","TEXTURE2","refractionTexture","TEXTURE3","reflectionTexture","textureCoord","dudvOffset","time","useRefraction","useReflection","refractionFramebuffer","reflectionFramebuffer","gl_matrix_1","INITIAL_STATE","vec3","start","Date","now","dayTime","autoSunMove","key1","key2","dz","nextDistance","forwardMove","leftMove","move","dt","setDayTime","spead","common","mat2_scale","v0","v1","LDU","L","D","U","mat2d_create","mat2d_clone","mat2d_copy","mat2d_identity","mat2d_fromValues","tx","ty","mat2d_set","mat2d_invert","aa","ab","ac","ad","atx","aty","mat2d_determinant","mat2d_multiply","mat2d_rotate","mat2d_scale","mat2d_fromRotation","mat2d_fromScaling","mat2d_str","mat2d_frob","mat2d_add","mat2d_subtract","mat2d_multiplyScalar","mat2d_multiplyScalarAndAdd","mat2d_exactEquals","mat2d_equals","mat2d_mul","mat2d_sub","mat3_create","fromMat4","mat3_clone","mat3_copy","mat3_fromValues","mat3_set","mat3_identity","mat3_transpose","mat3_invert","mat3_adjoint","mat3_determinant","mat3_multiply","mat3_translate","mat3_rotate","mat3_scale","mat3_fromTranslation","mat3_fromRotation","mat3_fromScaling","fromMat2d","normalFromMat4","mat3_str","mat3_frob","mat3_add","mat3_subtract","mat3_multiplyScalar","mat3_multiplyScalarAndAdd","mat3_exactEquals","mat3_equals","mat3_mul","mat3_sub","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_scale","vec4_length","vec4_dot","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","invDot","conjugate","fromMat3","fRoot","fTrace","fromEuler","halfToRad","cx","cy","cz","quat_str","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","sqlerp","setAxes","quat2_create","dq","quat2_clone","quat2_fromValues","w1","fromRotationTranslationValues","quat2_fromTranslation","quat2_fromRotation","quat2_fromMat4","outer","mat4","quat2_copy","quat2_identity","quat2_set","getReal","getDual","setReal","setDual","quat2_translate","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","quat2_rotateX","quat2_rotateY","quat2_rotateZ","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","quat2_add","quat2_multiply","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","quat2_mul","quat2_scale","quat2_dot","quat2_lerp","mt","quat2_invert","sqlen","quat2_squaredLength","quat2_conjugate","quat2_length","quat2_len","quat2_sqrLen","quat2_normalize","a_dot_b","quat2_str","quat2_exactEquals","quat2_equals","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","vec2_floor","vec2_min","vec2_max","vec2_round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","transformMat2","transformMat2d","vec2_transformMat4","vec2_rotate","p0","sinC","cosC","len1","len2","vec2_zero","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","mat2_namespaceObject","mat2d_namespaceObject","mat3_namespaceObject","quat_namespaceObject","quat2_namespaceObject","vec2_namespaceObject","vec4_namespaceObject"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import Mat4 = require('gl-matrix/mat4');\r\nimport Vec3 = require('gl-matrix/vec3');\r\nimport {Program, BufferObject} from './types';\r\nimport {State} from './store';\r\n\r\nfunction createShader(gl: WebGLRenderingContext, type: number, source: string) {\r\n    const shader = gl.createShader(type);\r\n    if (!shader) {\r\n        return null;\r\n    }\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        console.log(source);\r\n        console.warn(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    return shader;\r\n}\r\n\r\n\r\nexport async function loadTexture(gl: WebGLRenderingContext, url: string) {\r\n    const image: HTMLImageElement = await new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.src = url;\r\n        image.onload = () => resolve(image);\r\n        image.onerror = reject;\r\n    });\r\n    const texture = gl.createTexture();\r\n    const isPow2 = (n: number) => (n & (n - 1)) === 0;\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D, 0, gl.RGBA,\r\n        1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,\r\n        new Uint8Array([0, 0, 255, 255])\r\n    );\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D, 0, gl.RGBA,\r\n        gl.RGBA, gl.UNSIGNED_BYTE, image\r\n    );\r\n\r\n    if (isPow2(image.width) && isPow2(image.height)) {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    } else {\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    }\r\n\r\n    return texture as WebGLTexture;\r\n\r\n}\r\n\r\nexport function createProgram(\r\n    gl: WebGLRenderingContext,\r\n    vertextShaderSource: string,\r\n    fragmentShaderSource: string,\r\n): Program {\r\n\r\n    const vertexShader = createShader(gl,  gl.VERTEX_SHADER, vertextShaderSource);\r\n    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n    const program = gl.createProgram();\r\n\r\n    if (!program || !vertexShader || !fragmentShader) {\r\n        throw new Error('Failed to create shader program');\r\n    }\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.linkProgram(program);\r\n\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        console.warn(gl.getProgramInfoLog(program));\r\n        throw new Error('Can not creat program');\r\n    }\r\n    const attributes: Program['attributes'] = {};\r\n    const uniforms: Program['uniforms'] = {};\r\n    const attributesCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n    const uniformsCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n\r\n    for (let i = 0; i < attributesCount; i ++) {\r\n        const name = gl.getActiveAttrib(program, i)!.name;\r\n        attributes[name] = gl.getAttribLocation(program, name);\r\n    }\r\n    for (let i = 0; i < uniformsCount; i ++) {\r\n        const name = gl.getActiveUniform(program, i)!.name;\r\n        uniforms[name] = gl.getUniformLocation(program, name) as WebGLUniformLocation;\r\n    }\r\n\r\n    return {program, uniforms, attributes, gl};\r\n}\r\n\r\nexport function createMatrices(opts: {\r\n    camera: State['camera'],\r\n    aspect: number,\r\n    flip?: boolean,\r\n    far?: number\r\n}) {\r\n    const projection = Mat4.create();\r\n    const view = Mat4.create();\r\n    const model = Mat4.create();\r\n    Mat4.perspective(\r\n        projection,\r\n        Math.PI / 4,\r\n        opts.aspect,\r\n        0.1,\r\n        opts.far || 2000\r\n    );\r\n\r\n    const camera = Vec3.clone(opts.camera.position);\r\n    const center = Vec3.clone(opts.camera.center);\r\n    if (opts.flip) {\r\n        center[2] = -center[2];\r\n        camera[2] = -camera[2];\r\n    }\r\n\r\n    Mat4.lookAt(view, camera, center, [0, 0, 1]);\r\n\r\n    return {model, projection, view};\r\n}\r\n\r\nexport function createBuffer(gl: WebGLRenderingContext, type: number, data: Float32Array | Uint16Array) {\r\n    const buffer = gl.createBuffer();\r\n    gl.bindBuffer(type, buffer);\r\n    gl.bufferData(\r\n        type,\r\n        data,\r\n        gl.STATIC_DRAW\r\n    );\r\n    return buffer as WebGLBuffer;\r\n}\r\n\r\nexport function bindBuffer(gl: WebGLRenderingContext, buffer: WebGLBuffer, attribute: number, numComponents: number) {\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.vertexAttribPointer(\r\n        attribute,\r\n        numComponents,\r\n        gl.FLOAT,\r\n        false,\r\n        0,\r\n        0\r\n    );\r\n    gl.enableVertexAttribArray(attribute);\r\n}\r\n\r\nexport function bindArraysToBuffers(\r\n    gl: WebGLRenderingContext,\r\n    opts: {\r\n        arrays: {\r\n            [key: string]: number[]\r\n        },\r\n        textures?: BufferObject['textures'],\r\n        framebuffers?: BufferObject['framebuffers']\r\n    }\r\n): BufferObject {\r\n    const {arrays, textures = {}, framebuffers = {}} = opts;\r\n    return {\r\n        buffers: {\r\n            position: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.position)),\r\n            colors: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.colors)),\r\n            indices: createBuffer(gl, gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(arrays.indices)),\r\n            normal: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.normals)),\r\n            texture: createBuffer(gl, gl.ARRAY_BUFFER, new Float32Array(arrays.texture))\r\n        },\r\n        textures,\r\n        framebuffers,\r\n        size: arrays.indices.length\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function createFramebufferAndTexture(gl: WebGLRenderingContext, width: number, height: number) {\r\n    const texture = gl.createTexture() as WebGLTexture;\r\n    const framebuffer = gl.createFramebuffer() as WebGLFramebuffer;\r\n    const renderbuffer = gl.createRenderbuffer() as WebGLRenderbuffer;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D, 0, gl.RGBA,\r\n        width, height, 0,\r\n        gl.RGBA, gl.UNSIGNED_BYTE, null\r\n    );\r\n\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\r\n    gl.renderbufferStorage(\r\n        gl.RENDERBUFFER,\r\n        gl.DEPTH_COMPONENT16,\r\n        width,\r\n        height\r\n    );\r\n\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER,\r\n        gl.COLOR_ATTACHMENT0,\r\n        gl.TEXTURE_2D,\r\n        texture,\r\n        0\r\n    );\r\n    gl.framebufferRenderbuffer(\r\n        gl.FRAMEBUFFER,\r\n        gl.DEPTH_ATTACHMENT,\r\n        gl.RENDERBUFFER,\r\n        renderbuffer,\r\n    );\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    return [texture, framebuffer];\r\n}\r\n\r\n\r\nexport function inRange(v: number, min: number, max: number): number {\r\n    if (v < min) {\r\n        return min;\r\n    } else if (v > max) {\r\n        return max;\r\n    }\r\n    return v;\r\n}","import Vec3 = require('gl-matrix/vec3');\r\nimport Mat4 = require('gl-matrix/mat4');\r\nimport {createProgram, bindArraysToBuffers, createMatrices, bindBuffer, inRange} from './utils';\r\n\r\nimport vertextShaderSource from './shaders/sky.vertex.glsl';\r\nimport fragmentShaderSource from './shaders/sky.fragment.glsl';\r\nimport {Program, BufferObject} from './types';\r\nimport {State} from './store';\r\n\r\nconst {cos, sin, tan, PI} = Math;\r\n\r\ninterface Context {\r\n    gl: WebGLRenderingContext,\r\n    program: Program,\r\n    sun: BufferObject\r\n}\r\n\r\nexport function createSky(gl: WebGLRenderingContext) {\r\n    const program = createProgram(\r\n        gl,\r\n        vertextShaderSource,\r\n        fragmentShaderSource\r\n    )\r\n    const sun = bindArraysToBuffers(gl, {\r\n        arrays: createArrays()\r\n    });\r\n    const context = {gl, sun, program};\r\n    return {\r\n        render: createRender(context)\r\n    }\r\n}\r\n\r\nfunction createRender(context: Context) {\r\n    return function render(opts: {\r\n        state: State,\r\n        aspect: number,\r\n        flip?: boolean\r\n    }) {\r\n        const domeRadius = 1000;\r\n        const {gl, program, sun} = context;\r\n        const {\r\n            state,\r\n            aspect,\r\n            flip = false\r\n        } = opts;\r\n        const {projection, model, view} = createMatrices({\r\n            camera: state.camera,\r\n            aspect,\r\n            flip,\r\n            far: domeRadius * 2\r\n        });\r\n        Mat4.translate(model, model, state.camera.position);\r\n        Mat4.translate(model, model, [0, 0, -170]);\r\n        Mat4.scale(model, model, [domeRadius, domeRadius, domeRadius]);\r\n\r\n        gl.useProgram(program.program);\r\n\r\n        bindBuffer(gl, sun.buffers.position, program.attributes.position, 3);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sun.buffers.indices);\r\n\r\n        gl.uniform1f(\r\n            program.uniforms.domeRadius,\r\n            domeRadius\r\n        );\r\n\r\n        gl.uniform3fv(\r\n            program.uniforms.sunPosition,\r\n            state.sky.sunPosition\r\n        );\r\n\r\n        gl.uniform3fv(\r\n            program.uniforms.cameraPosition,\r\n            state.camera.position\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.projection,\r\n            false,\r\n            projection\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.view,\r\n            false,\r\n            view\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.model,\r\n            false,\r\n            model\r\n        );\r\n\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.drawElements(gl.TRIANGLES, sun.size, gl.UNSIGNED_SHORT, 0);\r\n        gl.disable(gl.BLEND);\r\n    }\r\n}\r\n\r\nfunction createArrays() {\r\n    const c = 50;\r\n    const position = [];\r\n    const indices = [];\r\n\r\n    for (let i = 0; i <= c; i ++) {\r\n        const b = PI / c * i - PI / 2;\r\n        for (let j = 0; j < c; j ++) {\r\n            const a = PI * 2 / c * j;\r\n            const x = cos(a) * cos(b);\r\n            const y = sin(a) * cos(b);\r\n            const z = sin(b);\r\n            const k = i * c + j;\r\n            position.push(x, y, z);\r\n            if (i === c) {\r\n                continue;\r\n            }\r\n            if (j === c - 1) {\r\n                indices.push(\r\n                    i * c, k + c, k,\r\n                    k + c, k + 1, i * c\r\n                );\r\n            } else {\r\n                indices.push(\r\n                    k, k + 1, k + c,\r\n                    k + 1, k + c, k + c + 1\r\n                );\r\n            }\r\n        }\r\n    }\r\n    \r\n    return {position, indices};\r\n}\r\n\r\n/**\r\n * @see ./bin/sun-positon-regression.js\r\n */\r\nfunction getAzimuth(t: number) {\r\n    return 7.344052639206152e-8 * t - 0.1829595519336553;\r\n}\r\nfunction getAltitude(t: number) {\r\n    return tan(-4.83049e-16 * t * t + 4.21414e-8 * t - 0.420437);\r\n}\r\n\r\nfunction pad2(st: string | number) {\r\n    return ('00' + st).slice(-2);\r\n}\r\n\r\nexport function sunTimeToString(t: number) {\r\n    const minutes = Math.ceil(t / 60 / 1000);\r\n    const m = minutes % 60;\r\n    const h = Math.floor(minutes / 60);\r\n    return `${pad2(h)}:${pad2(m)}`;\r\n}\r\n\r\nexport function getSunPosition(n: number) {\r\n    const t = n % (24 * 3600 * 1000);\r\n    const altitude = getAltitude(t);\r\n    const azimuth = getAzimuth(t);\r\n    const x = cos(altitude) * cos(azimuth);\r\n    const y = cos(altitude) * sin(azimuth);\r\n    const z = sin(altitude);\r\n\r\n    const sunPosition = Vec3.fromValues(x, -y, z);\r\n    const directionalLightColor = Vec3.fromValues(1, 1, 1);\r\n    const directionalLightVector = Vec3.create();\r\n    const lightAttenuation = inRange(z * 2, 0, 1) // use scattering algorithm for this\r\n    Vec3.negate(directionalLightVector, sunPosition);\r\n    Vec3.scale(directionalLightColor, directionalLightColor, lightAttenuation);\r\n\r\n    return {\r\n        sunPosition: Vec3.fromValues(x, -y, z),\r\n        directionalLightColor,\r\n        directionalLightVector\r\n    };\r\n}","import {createTerrain} from './create-terrain';\r\nimport {initControls} from './init-contol';\r\nimport {createWater} from './create-water';\r\nimport {createSky} from './create-sky';\r\nimport {Unpacked} from './types';\r\nimport {\r\n    getInitialState,\r\n    toggle,\r\n    zoom,\r\n    rorateCamera,\r\n    moveSun,\r\n    autoMoveSun,\r\n    updateWaterTime,\r\n    State,\r\n    moveCamera\r\n} from './store';\r\n\r\nwindow.addEventListener('load', setup);\r\n\r\nconst SIZE = Math.min(window.innerWidth, window.innerHeight, 1024);\r\nconst CANVAS_WIDTH = SIZE\r\nconst CANVAS_HEIGHT = SIZE;\r\nconst WATER_SIZE = SIZE * 2;\r\nconst DETAILS_LEVEL = 4;\r\n\r\nasync function setup() {\r\n    const canvas = document.querySelector('canvas')!;\r\n    canvas.width = CANVAS_WIDTH;\r\n    canvas.height = CANVAS_HEIGHT;\r\n    const gl = canvas.getContext('experimental-webgl') as WebGLRenderingContext;\r\n    if (!gl) {\r\n        console.warn('Can not create webgl context');\r\n        return;\r\n    }\r\n\r\n    const terrain = await createTerrain(gl, {\r\n        heatmap: 'heightmaps/terrain4.png',\r\n        height: 500 / DETAILS_LEVEL,\r\n        chunkSize: 20 / DETAILS_LEVEL,\r\n        baseLevel: 50 / DETAILS_LEVEL,\r\n    });\r\n\r\n    const water = await createWater(gl, {\r\n        size: WATER_SIZE,\r\n    })\r\n\r\n    const sky = createSky(gl);\r\n\r\n    const state = getInitialState();\r\n    const {emitter} = initControls(canvas);\r\n\r\n    emitter\r\n        .on('visability', e => state.app.active = e.visability)\r\n        .on('toggleRenderWater', () => toggle(state, 'water', 'visible'))\r\n        .on('toggleRenderTerrain', () => toggle(state, 'terrain', 'visible'))\r\n        .on('toggleRefraction', () => toggle(state, 'water', 'useRefraction'))\r\n        .on('toggleReflection', () => toggle(state, 'water', 'useReflection'))\r\n        .on('toggleRenderSun', () => toggle(state, 'sky', 'visible'))\r\n        .on('toggleAutoSunMove', () => toggle(state, 'sky', 'autoSunMove'))\r\n        .on('zoom', e => zoom(state, e.dy))\r\n        .on('moveCamera', e => moveCamera(state, e))\r\n        .on('rotateCamera', e => rorateCamera(state, e.dx / 500, e.dy))\r\n        .on('moveSun', e => moveSun(state, e.ds))\r\n    \r\n    function render() {\r\n        if (!state.app.active) {\r\n            return requestAnimationFrame(render);\r\n        }\r\n        updateWaterTime(state)\r\n        autoMoveSun(state, 3e5);\r\n        drawScene({\r\n            gl: gl!,\r\n            state,\r\n            terrain,\r\n            water,\r\n            sky\r\n        });\r\n        requestAnimationFrame(render);\r\n    }\r\n    \r\n    render();\r\n}\r\n\r\n\r\nfunction drawScene(props: {\r\n    gl: WebGLRenderingContext,\r\n    state: State,\r\n    terrain: Unpacked<ReturnType<typeof createTerrain>>,\r\n    water: Unpacked<ReturnType<typeof createWater>>,\r\n    sky: Unpacked<ReturnType<typeof createSky>>\r\n}) {\r\n    const aspect = CANVAS_WIDTH / CANVAS_HEIGHT;\r\n    const terrainScale = [WATER_SIZE, WATER_SIZE, 100];\r\n    const {\r\n        gl,\r\n        terrain,\r\n        water,\r\n        sky,\r\n        state\r\n    } = props;\r\n    const opts = {\r\n        state,\r\n        terrainScale,\r\n        aspect\r\n    };\r\n\r\n    gl.clearDepth(1.0);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthFunc(gl.LEQUAL);   \r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    if (state.water.visible) {\r\n        water.updateReflectionTexture(() => {\r\n            if (state.terrain.visible) {\r\n                terrain.render({\r\n                    ...opts,\r\n                    clipDirection: -1,\r\n                    flip: true\r\n                })\r\n            }\r\n            if (state.sky.visible) {\r\n                sky.render({\r\n                    ...opts,\r\n                    flip: true\r\n                });\r\n            } else {\r\n                 gl.clearColor(0.53, 0.8, 0.98, 1.); \r\n            }\r\n        })\r\n        water.updateRefractionTexture(() => {\r\n            if (state.terrain.visible) {\r\n                terrain.render({\r\n                    ...opts,\r\n                    clipDirection: 1\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    gl.viewport(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n\r\n    if (state.terrain.visible) {\r\n        terrain.render(opts)\r\n    }\r\n    if (state.water.visible) {\r\n        water.render(opts);\r\n    }\r\n    if (state.sky.visible) {\r\n        sky.render(opts);\r\n    }\r\n}\r\n","import Mat4 = require('gl-matrix/mat4');\r\nimport Vec3 = require('gl-matrix/vec3');\r\n\r\nimport {createProgram, bindArraysToBuffers, createMatrices, bindBuffer} from './utils';\r\n\r\nimport terrainVertextShaderSource from './shaders/terrain.vertex.glsl';\r\nimport terrainFragmentShaderSource from './shaders/terrain.fragment.glsl';\r\nimport {Program, BufferObject} from './types';\r\nimport {State} from './store';\r\n\r\ninterface Context {\r\n    gl: WebGLRenderingContext,\r\n    program: Program,\r\n    terrain: BufferObject\r\n}\r\n\r\nexport async function createTerrain(\r\n    gl: WebGLRenderingContext,\r\n    opts: {\r\n        heatmap: string,\r\n        height: number,\r\n        chunkSize: number,\r\n        baseLevel?: number,\r\n    }\r\n) {\r\n    const arrays = await createArrays(opts.heatmap, opts.height, opts.chunkSize, opts.baseLevel);\r\n    const program = createProgram(\r\n        gl,\r\n        terrainVertextShaderSource,\r\n        terrainFragmentShaderSource\r\n    );\r\n    const terrain = bindArraysToBuffers(gl, {\r\n        arrays\r\n    });\r\n\r\n    const context = {terrain, gl, program};\r\n\r\n    return {\r\n        render: createRender(context)\r\n    }\r\n}\r\n\r\nfunction createRender(context: Context) {\r\n    return function render(opts: {\r\n        state: State,\r\n        aspect: number,\r\n        clipDirection?: -1 | 1 | 0,\r\n        terrainScale?: number[]\r\n        clipLevel?: number,\r\n        flip?: boolean,\r\n    }) {\r\n        const {gl, terrain, program} = context;\r\n        const {\r\n            state,\r\n            aspect,\r\n            clipDirection = 0,\r\n            clipLevel = 0,\r\n            flip = false,\r\n            terrainScale = [1, 1, 1],\r\n        } = opts;\r\n        const {projection, model, view} = createMatrices({\r\n            camera: state.camera,\r\n            aspect,\r\n            flip\r\n        });\r\n\r\n        Mat4.scale(model, model, terrainScale);\r\n\r\n        gl.useProgram(program.program);\r\n        bindBuffer(gl, terrain.buffers.position, program.attributes.position, 3);\r\n        bindBuffer(gl, terrain.buffers.normal, program.attributes.normal, 3);\r\n        bindBuffer(gl, terrain.buffers.colors, program.attributes.colors, 4);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, terrain.buffers.indices);\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.projection,\r\n            false,\r\n            projection\r\n        );\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.model,\r\n            false,\r\n            model\r\n        );\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.view,\r\n            false,\r\n            view\r\n        );\r\n\r\n        gl.uniform3fv(program.uniforms.directionalLightVector, state.light.direction);\r\n        gl.uniform3fv(program.uniforms.directionalLightColor, state.light.color);\r\n        gl.uniform1f(program.uniforms.clipDirection, clipDirection);\r\n        gl.uniform1f(program.uniforms.clipLevel, clipLevel);\r\n\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.drawElements(gl.TRIANGLES, terrain.size, gl.UNSIGNED_SHORT, 0);\r\n        gl.disable(gl.BLEND);\r\n    }\r\n}\r\n\r\nasync function createArrays(src: string, maxHeight: number, size: number, baseLevel: number = 0) {\r\n    const canvas = document.createElement('canvas');\r\n    const image = await loadImage(src);\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) {\r\n        throw new Error('Can not create 2d context');\r\n    }\r\n    ctx.drawImage(image, 0, 0);\r\n    const {data} = ctx.getImageData(0, 0, image.width, image.height);\r\n    const u32 = new Uint32Array(data)\r\n    const levelHeight = 256 / maxHeight;\r\n\r\n    const width = Math.floor(image.width / size);\r\n    const height = Math.floor(image.height / size);\r\n    const heatmap = new Float32Array(width * height);\r\n    let max = 0;\r\n\r\n    for (let i = 0; i < height; i ++) {\r\n        for (let j = 0; j < width; j ++) {\r\n            let s = 0;\r\n            for (let k = 0; k < size; k ++) {\r\n                for (let l = 0; l < size; l ++) {\r\n                    s += u32[(i * size * image.width + j * size + k * size + l) * 4]\r\n                }\r\n            }\r\n            const v = s / size / size / levelHeight;\r\n            heatmap[i * width + j] = v;\r\n            if (max < v) {\r\n                max = v;\r\n            }\r\n        }\r\n    }\r\n\r\n    const position = [];\r\n    const indices = [];\r\n    const colors = [];\r\n    const normals = [];\r\n    const texture = [];\r\n\r\n    for (let i = 0; i < height; i ++) {\r\n        for (let j = 0; j < width; j++) {\r\n            const k = i * width + j\r\n            const c = heatmap[k] / max;\r\n            if (!Number.isFinite(c)) {\r\n                console.log({i, j, c})\r\n            }\r\n            position.push(\r\n                j / width - 0.5,\r\n                i / height - 0.5,\r\n                // base level probably should be as the part of transition\r\n                (heatmap[k] - baseLevel) / max\r\n            )\r\n            colors.push(c, c, c, 1)\r\n\r\n            if ((i !== height - 1) && (j !== width - 1)) {\r\n                indices.push(\r\n                    k,\r\n                    k + width,\r\n                    k + 1,\r\n                    k + 1,\r\n                    k + width,\r\n                    k + width + 1,\r\n                );\r\n            }\r\n            texture.push(j / width, i / height);\r\n            \r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < position.length / 3; i ++) {\r\n        const w = width;\r\n        const h = height;\r\n        const iw = i % w;\r\n        const ih = ~~(i / w);\r\n        const facesIndexes = [\r\n            iw > 0 && ih > 0 && [\r\n                i - w,\r\n                i - 1,\r\n                i,\r\n            ],\r\n            iw + 1 < w && ih > 0 && [\r\n                i - w,\r\n                i,\r\n                i - w + 1,\r\n            ],\r\n            iw + 1 < w && ih > 0 && [\r\n                i - w + 1,\r\n                i,\r\n                i + 1,\r\n            ],\r\n            iw > 0 && ih < h && [\r\n                i - 1,\r\n                i + w - 1,\r\n                i,\r\n            ],\r\n            iw > 0 && ih < h && [\r\n                i,\r\n                i + w - 1,\r\n                i + w,\r\n            ],\r\n            iw + 1 < w && ih < h && [\r\n                i,\r\n                i + w,\r\n                i + 1,\r\n            ],\r\n        ];\r\n        const faces = [];\r\n        const facesNormals = [];\r\n\r\n        for (let j = 0; j < facesIndexes.length; j ++) {\r\n            const f = facesIndexes[j];\r\n            for (let k = 0; k < 3; k ++) {\r\n                if (f) {\r\n                    faces.push(\r\n                        position[f[k] * 3],\r\n                        position[f[k] * 3 + 1],\r\n                        position[f[k] * 3 + 2],\r\n                    )\r\n                }\r\n            }\r\n        }\r\n        for (let j = 0; j < faces.length / 9; j ++) {\r\n            const p1 = Vec3.fromValues(\r\n                faces[j * 9 + 0],\r\n                faces[j * 9 + 1],\r\n                faces[j * 9 + 2]\r\n            );\r\n            const p2 = Vec3.fromValues(\r\n                faces[j * 9 + 3],\r\n                faces[j * 9 + 4],\r\n                faces[j * 9 + 5]\r\n            );\r\n            const p3 = Vec3.fromValues(\r\n                faces[j * 9 + 6],\r\n                faces[j * 9 + 7],\r\n                faces[j * 9 + 8]\r\n            );\r\n            ////\r\n            // U = p2 - p1\r\n            // V = p3 - p1\r\n            // N = U x V\r\n            ////\r\n            Vec3.subtract(p2, p2, p1)\r\n            Vec3.subtract(p3, p3, p1)\r\n            Vec3.cross(p2, p2, p3)\r\n            Vec3.normalize(p2, p2);\r\n            facesNormals.push(p2);\r\n        }\r\n\r\n        const n = Vec3.fromValues(0, 0, 0);\r\n        for (let j = 0; j < facesNormals.length; j ++) {\r\n            Vec3.add(n, n, facesNormals[j]);\r\n        }\r\n        Vec3.normalize(n, n);\r\n\r\n        normals.push(n[0], n[1], n[2]);\r\n    }\r\n\r\n    return {\r\n        position,\r\n        indices,\r\n        colors,\r\n        normals,\r\n        texture,\r\n    }\r\n}\r\n\r\nfunction loadImage(src: string): Promise<HTMLImageElement> {\r\n    return new Promise((resolve, reject) => {\r\n        const image = new Image();\r\n        image.src = src;\r\n        image.onload = () => resolve(image);\r\n        image.onerror = reject;\r\n    })\r\n}","module.exports = \"attribute vec4 position;\\r\\nattribute vec3 normal;\\r\\nattribute vec4 colors;\\r\\n\\r\\nuniform mat4 view;\\r\\nuniform mat4 model;\\r\\nuniform mat4 projection;\\r\\nuniform vec3 directionalLightVector;\\r\\nuniform vec3 directionalLightColor;\\r\\nuniform float clipDirection;\\r\\nuniform float clipLevel;\\r\\n\\r\\nvarying highp vec3 vLighting;\\r\\nvarying lowp vec2 vTextureCoord;\\r\\nvarying lowp vec4 fragmentColor;\\r\\nvarying float shouldClip;\\r\\n\\r\\nvoid main() {\\r\\n  highp vec3 ambientLight = vec3(0.1, 0.1, 0.1);\\r\\n  highp vec3 directionalVector = normalize(directionalLightVector);\\r\\n\\r\\n  highp float directional = max(dot(normal, directionalVector), 0.0);\\r\\n  vLighting = ambientLight + (directionalLightColor * directional);\\r\\n\\r\\n  gl_Position = projection * view * model * position;\\r\\n\\r\\n  fragmentColor = colors;\\r\\n  if (clipDirection == 1.0) {\\r\\n    shouldClip = position.z > clipLevel ? 1.0 : 0.0;\\r\\n  } else if (clipDirection == -1.0) {\\r\\n    shouldClip = position.z < clipLevel ? 1.0 : 0.0;\\r\\n  } else {\\r\\n    shouldClip = 0.0;\\r\\n  }\\r\\n}\"","module.exports = \"varying highp vec3 vLighting;\\r\\nvarying highp float shouldClip;\\r\\nvarying lowp vec4 fragmentColor;\\r\\n\\r\\nconst lowp vec4 nothingColor = vec4(0.0, 0.0, 0.0, 0.0);\\r\\nconst lowp vec4 grassColor = vec4(0.12, 0.43, 0.02, 1.0);\\r\\nconst lowp vec4 snowColor = vec4(1.0);\\r\\nconst lowp vec4 groundColor = vec4(0.85, 0.84, 0.79, 1.0);\\r\\n\\r\\nvoid main() {\\r\\n  if (shouldClip == 1.0) {\\r\\n    discard;\\r\\n  }\\r\\n  lowp float x = fragmentColor.x;\\r\\n  lowp float groundGrassMixFactor = smoothstep(0.1, 0.2, x);\\r\\n  lowp float grassSnowMixFactor = smoothstep(0.7, 0.8, x);\\r\\n  lowp float nothingGroundMixFactor = smoothstep(0.00, 0.015, x);\\r\\n  lowp vec4 color = mix(groundColor, grassColor, groundGrassMixFactor);\\r\\n  color = mix(color, snowColor, grassSnowMixFactor);\\r\\n  color = mix(nothingColor, color, nothingGroundMixFactor);\\r\\n\\r\\n  gl_FragColor = vec4(color.rgb * vLighting, color.a);\\r\\n}\\r\\n\"","import {EventEmitter} from 'events';\r\n\r\nexport function initControls(elem: HTMLElement) {\r\n    let mousedown = false;\r\n    const pressed = new Set();\r\n    const ee = new EventEmitter();\r\n    const pullKeys = () => {\r\n        let left = 0;\r\n        let forward = 0;\r\n        let up = 0;\r\n        let sunTime = 0;\r\n        if (pressed.has('w')) {\r\n            forward ++;\r\n        }\r\n        if (pressed.has('s')) {\r\n            forward --\r\n        }\r\n        if (pressed.has('a')) {\r\n            left ++\r\n        }\r\n        if (pressed.has('d')) {\r\n            left --\r\n        }\r\n        if (pressed.has('e')) {\r\n            up ++\r\n        }\r\n        if (pressed.has('q')) {\r\n            up --\r\n        }\r\n        if (pressed.has('j')) {\r\n            sunTime --;\r\n        }\r\n        if (pressed.has('k')) {\r\n            sunTime ++;\r\n        }\r\n        if (sunTime) {\r\n            ee.emit('moveSun', {sunTime});\r\n        }\r\n        if (left || forward || up) {\r\n            ee.emit('moveCamera', {left, forward, up});\r\n        }\r\n\r\n        requestAnimationFrame(pullKeys);\r\n    }\r\n\r\n    const onKeyPress = (e: KeyboardEvent) => {\r\n        switch (e.key) {\r\n            case '1':\r\n                ee.emit('toggleRenderTerrain');\r\n                break;\r\n            case '2':\r\n                ee.emit('toggleRenderWater');\r\n                break;\r\n            case '3':\r\n                ee.emit('toggleRefraction');\r\n                break;\r\n            case '4':\r\n                ee.emit('toggleReflection');\r\n                break;\r\n            case '5':\r\n                ee.emit('toggleRenderSun');\r\n                break;\r\n            case '6':\r\n                ee.emit('toggleAutoSunMove');\r\n                break;\r\n            default:\r\n                pressed.add(e.key);\r\n        }\r\n    }\r\n\r\n    const onWheel = (e: WheelEvent) => {\r\n        const {deltaY: dy} = e;\r\n        if (dy) {\r\n            ee.emit('zoom', {\r\n                dy: dy / Math.abs(dy) * 10\r\n            });\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    const onKeyup = (e: KeyboardEvent) => {\r\n        pressed.delete(e.key)\r\n    }\r\n\r\n    const onMouseDown = () => {\r\n        mousedown = true;\r\n    }\r\n    const onMouseUp = () => {\r\n        mousedown = false;\r\n    }\r\n    const onMouseMove = (e: MouseEvent) => {\r\n        const {movementX, movementY} = e;\r\n        if (mousedown) {\r\n            ee.emit('rotateCamera', {dx: -movementX, dy: movementY})\r\n        }\r\n    }\r\n\r\n    const onContextMenu = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    const onFocus = () => {\r\n        ee.emit('visability', {visible: true});\r\n    }\r\n    const onBlur = () => {\r\n        pressed.clear();\r\n        ee.emit('visability', {visible: false});\r\n    }\r\n\r\n    const tearDown = () => {\r\n        ee.removeAllListeners();\r\n        elem.removeEventListener('wheel', onWheel);\r\n        elem.removeEventListener('mousedown', onMouseDown)\r\n        elem.removeEventListener('contextmenu', onContextMenu)\r\n        window.removeEventListener('mouseup', onMouseUp)\r\n        window.removeEventListener('mousemove', onMouseMove)\r\n        window.removeEventListener('keypress', onKeyPress);\r\n        window.removeEventListener('keyup', onKeyup);\r\n        window.removeEventListener('focus', onFocus)\r\n        window.removeEventListener('blur', onBlur)\r\n    }\r\n\r\n    pullKeys();\r\n\r\n    elem.addEventListener('wheel', onWheel);\r\n    elem.addEventListener('mousedown', onMouseDown)\r\n    elem.addEventListener('contextmenu', onContextMenu)\r\n    window.addEventListener('mouseup', onMouseUp)\r\n    window.addEventListener('mousemove', onMouseMove)\r\n    window.addEventListener('keypress', onKeyPress);\r\n    window.addEventListener('keyup', onKeyup);\r\n    window.addEventListener('focus', onFocus)\r\n    window.addEventListener('blur', onBlur)\r\n\r\n    return {\r\n        emitter: ee,\r\n        tearDown\r\n    }\r\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","import Mat4 = require('gl-matrix/mat4');\r\nimport Vec3 = require('gl-matrix/vec3');\r\nimport {createProgram, loadTexture, createFramebufferAndTexture, bindArraysToBuffers, createMatrices, bindBuffer} from './utils';\r\nimport {Program, BufferObject} from './types';\r\n\r\nimport waterVertextShaderSource from './shaders/water.vertex.glsl';\r\nimport waterFragmentShaderSource from './shaders/water.fragment.glsl';\r\nimport {State} from './store';\r\n\r\ninterface Context {\r\n    gl: WebGLRenderingContext,\r\n    program: Program,\r\n    size: number,\r\n    water: BufferObject\r\n}\r\n\r\nexport async function createWater(\r\n    gl: WebGLRenderingContext,\r\n    opts: {\r\n        size: number,\r\n    }\r\n) {\r\n    const {size} = opts;\r\n    const dudvTexture = await loadTexture(gl, 'textures/dudvmap.png');\r\n    const normalMapTexture = await loadTexture(gl, 'textures/normalmap.png');\r\n    const [\r\n        refractionTexture,\r\n        refractionFramebuffer\r\n    ] = createFramebufferAndTexture(gl, size, size);\r\n    const [\r\n        reflectionTexture,\r\n        reflectionFramebuffer\r\n    ] = createFramebufferAndTexture(gl, size, size);\r\n    const program = createProgram(\r\n        gl,\r\n        waterVertextShaderSource,\r\n        waterFragmentShaderSource\r\n    );\r\n    const arrays = createArrays();\r\n    const water = bindArraysToBuffers(gl, {\r\n        arrays,\r\n        framebuffers: {\r\n            refraction: refractionFramebuffer,\r\n            reflection: reflectionFramebuffer\r\n        },\r\n        textures: {\r\n            dudv: dudvTexture,\r\n            normalMap: normalMapTexture,\r\n            refraction: refractionTexture,\r\n            reflection: reflectionTexture\r\n        }\r\n    })\r\n\r\n    const context = {gl, program, size, water}\r\n\r\n    return {\r\n        render: createRender(context),\r\n        updateReflectionTexture: createUpdateReflectionTexture(context),\r\n        updateRefractionTexture: createUpdateRefractionTexture(context)\r\n    }\r\n}\r\n\r\nfunction createUpdateReflectionTexture(context: Context) {\r\n    return function updateReflectionTexture(renderScene: () => void) {\r\n        const {gl, water, size} = context;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, water.framebuffers.reflection);\r\n        gl.viewport(0, 0, size, size);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        renderScene();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n}\r\n\r\nfunction createUpdateRefractionTexture(context: Context) {\r\n    return function updateRefractionTexture(renderScene: () => void) {\r\n        const {gl, water, size} = context;\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, water.framebuffers.refraction);\r\n        gl.viewport(0, 0, size, size);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        renderScene();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n}\r\n\r\nfunction createRender(context: Context) {\r\n\r\n    const {\r\n        size,\r\n        program,\r\n        gl,\r\n        water\r\n    } = context;\r\n    \r\n    gl.useProgram(program.program);\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, water.textures.dudv);\r\n    gl.uniform1i(program.uniforms.dudvTexture, 0);\r\n\r\n    gl.activeTexture(gl.TEXTURE1);\r\n    gl.bindTexture(gl.TEXTURE_2D, water.textures.normalMap);\r\n    gl.uniform1i(program.uniforms.normalMapTexture, 1);\r\n\r\n    gl.activeTexture(gl.TEXTURE2);\r\n    gl.bindTexture(gl.TEXTURE_2D, water.textures.refraction);\r\n    gl.uniform1i(program.uniforms.refractionTexture, 2);\r\n\r\n    gl.activeTexture(gl.TEXTURE3);\r\n    gl.bindTexture(gl.TEXTURE_2D, water.textures.reflection);\r\n    gl.uniform1i(program.uniforms.reflectionTexture, 3);\r\n\r\n    return function render(opts: {\r\n        state: State,\r\n        aspect: number,\r\n    }) {\r\n        const {\r\n            state,\r\n            aspect\r\n        } = opts;\r\n        const {projection, model, view} = createMatrices({\r\n            camera: state.camera,\r\n            aspect\r\n        });\r\n\r\n        Mat4.scale(model, model, [size, size, 1]);\r\n\r\n        gl.useProgram(program.program);\r\n        bindBuffer(gl, water.buffers.position, program.attributes.position, 3);\r\n        bindBuffer(gl, water.buffers.texture, program.attributes.textureCoord, 2);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, water.buffers.indices);\r\n\r\n        gl.uniform1f(program.uniforms.dudvOffset, (state.water.time / 1000 * 0.03) % 1);\r\n        gl.uniform1i(program.uniforms.useRefraction, Number(state.water.useRefraction));\r\n        gl.uniform1i(program.uniforms.useReflection, Number(state.water.useReflection));\r\n        gl.uniform3fv(program.uniforms.cameraPosition, state.camera.position);\r\n        gl.uniform3fv(program.uniforms.directionalLightVector, state.light.direction);\r\n        gl.uniform3fv(program.uniforms.directionalLightColor, state.light.color);\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.projection,\r\n            false,\r\n            projection\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.model,\r\n            false,\r\n            model\r\n        );\r\n\r\n        gl.uniformMatrix4fv(\r\n            program.uniforms.view,\r\n            false,\r\n            view\r\n        );\r\n\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        gl.drawElements(gl.TRIANGLES, water.size, gl.UNSIGNED_SHORT, 0);\r\n        gl.disable(gl.BLEND);\r\n    }\r\n}\r\n\r\nfunction createArrays() {\r\n    const position = [\r\n        -0.5, -0.5, 0,\r\n        +0.5, -0.5, 0,\r\n        -0.5, +0.5, 0,\r\n        +0.5, +0.5, 0,\r\n    ];\r\n    const indices = [\r\n        0, 2, 1,\r\n        1, 2, 3\r\n    ];\r\n\r\n    const texture = [\r\n        0, 0,\r\n        1, 0,\r\n        0, 1,\r\n        1, 1,\r\n    ];\r\n\r\n    return {position, indices, texture};\r\n}","module.exports = \"attribute vec4 position;\\r\\nattribute vec2 textureCoord;\\r\\n\\r\\nuniform mat4 view;\\r\\nuniform mat4 model;\\r\\nuniform mat4 projection;\\r\\nuniform lowp vec3 cameraPosition;\\r\\n\\r\\nvarying highp vec2 vTextureCoord;\\r\\nvarying highp vec4 clipSpace;\\r\\nvarying highp vec3 fromFragmentToCamera;\\r\\nvarying lowp float reflectionYOffset;\\r\\n\\r\\nconst lowp float tiling = 10.0;\\r\\n\\r\\nvoid main() {\\r\\n    vec4 worldPosition = model * position;\\r\\n    gl_Position = clipSpace = projection * view * worldPosition;\\r\\n\\r\\n    fromFragmentToCamera = cameraPosition - worldPosition.xyz;\\r\\n    vTextureCoord = textureCoord * tiling;\\r\\n}\"","module.exports = \"varying lowp vec2 vTextureCoord;\\r\\nvarying lowp vec4 clipSpace;\\r\\nvarying lowp vec3 fromFragmentToCamera;\\r\\n\\r\\nuniform sampler2D dudvTexture;\\r\\nuniform sampler2D normalMapTexture;\\r\\nuniform sampler2D refractionTexture;\\r\\nuniform sampler2D reflectionTexture;\\r\\nuniform lowp float dudvOffset;\\r\\nuniform int useRefraction;\\r\\nuniform int useReflection;\\r\\nuniform lowp vec3 directionalLightVector;\\r\\nuniform lowp vec3 directionalLightColor;\\r\\n\\r\\nconst lowp float waterDistortionStrenth = 0.02;\\r\\nconst lowp float fresnelStrength = 1.5;\\r\\nconst lowp float waterReflectivity = 0.5;\\r\\nconst lowp vec4 shallowWaterColor =  vec4(0.0, 0.1, 0.3, 1.0);\\r\\n// const lowp vec4 deepWaterColor = vec4(0.0, 0.1, 0.2, 1.0);\\r\\nconst lowp float shineDamper = 20.0;\\r\\n\\r\\nvoid main() {\\r\\n    // distortion\\r\\n    lowp vec2 distortedTexCoords = texture2D(dudvTexture, vec2(vTextureCoord.x, vTextureCoord.y + dudvOffset)).xy * 0.1;\\r\\n    distortedTexCoords = vTextureCoord + vec2(distortedTexCoords.x + dudvOffset, distortedTexCoords.y);\\r\\n\\r\\n    lowp vec2 totalDistortion = (texture2D(dudvTexture, distortedTexCoords).xy * 2.0 - 1.0) * waterDistortionStrenth;\\r\\n\\r\\n    // base refract/reflect texture coordinates\\r\\n    lowp vec2 ndc = (clipSpace.xy / clipSpace.w) / 2.0 + 0.5;\\r\\n    lowp vec2 refractTexCoords = vec2(ndc.x, +ndc.y);\\r\\n    lowp vec2 reflectTexCoords = vec2(ndc.x, 1.0-ndc.y);\\r\\n\\r\\n\\r\\n    // refractive factor\\r\\n    lowp vec3 toCamera = normalize(fromFragmentToCamera);\\r\\n    lowp vec4 normalMapColor = texture2D(normalMapTexture, distortedTexCoords);\\r\\n    lowp vec3 normal = normalMapColor.xyz * 2.0 - 1.0;\\r\\n    normal = normalize(normal);\\r\\n    lowp float refractiveFactor = dot(toCamera, normal);\\r\\n    refractiveFactor = pow(refractiveFactor, fresnelStrength);\\r\\n\\r\\n    // puting all together\\r\\n    refractTexCoords += totalDistortion;\\r\\n    reflectTexCoords += totalDistortion;\\r\\n    // refractTexCoords = clamp(refractTexCoords, 0.001, 0.999);\\r\\n    // reflectTexCoords.x = clamp(reflectTexCoords.x, 0.001, 0.999);\\r\\n    // reflectTexCoords.y = clamp(reflectTexCoords.y, 0.001, 0.999);\\r\\n\\r\\n    // lighs\\r\\n    lowp vec3 reflectedLight = reflect(normalize(directionalLightVector), normal);\\r\\n    lowp float specular = max(dot(reflectedLight, toCamera), 0.0);\\r\\n    specular = pow(specular, shineDamper);\\r\\n    lowp vec3 specularHighlights = directionalLightColor * specular * waterReflectivity;\\r\\n\\r\\n    // color\\r\\n    lowp vec4 refractColor = texture2D(refractionTexture, refractTexCoords);\\r\\n    lowp vec4 reflectColor = texture2D(reflectionTexture, reflectTexCoords);\\r\\n\\r\\n    if (useReflection == 1 && useRefraction == 1) {\\r\\n      gl_FragColor = mix(reflectColor, refractColor, refractiveFactor);\\r\\n    } else if (useReflection == 1) {\\r\\n      gl_FragColor = reflectColor;\\r\\n    } else if (useRefraction == 1) {\\r\\n      gl_FragColor = refractColor;\\r\\n    }\\r\\n    gl_FragColor = mix(gl_FragColor, shallowWaterColor, 0.2);\\r\\n\\r\\n    gl_FragColor = gl_FragColor + vec4(specularHighlights, 1.0);\\r\\n}\\r\\n\"","module.exports = \"attribute vec4 position;\\r\\n\\r\\nuniform lowp mat4 view;\\r\\nuniform lowp mat4 model;\\r\\nuniform lowp mat4 projection;\\r\\n\\r\\nvarying lowp vec4 worldPosition;\\r\\n\\r\\nvoid main() {\\r\\n    worldPosition = position;\\r\\n    gl_Position = projection * view * model * worldPosition;\\r\\n}\"","module.exports = \"uniform lowp float domeRadius;\\r\\nuniform lowp vec3 sunPosition;\\r\\nuniform lowp vec3 cameraPosition;\\r\\n\\r\\nconst lowp float PI = 3.1415926535897932384626433832795;\\r\\nconst lowp float PI_2 = 1.57079632679489661923;\\r\\nconst lowp float si = 22.0; // sun intencity\\r\\n\\r\\nconst lowp float earthRadius = 6371e3;\\r\\nconst lowp float atmosphereRadius = 6471e3;\\r\\nconst lowp float rsh = 8.0e3; // Rayleigh scale height\\r\\nconst lowp float msh = 1.2e3; // Mie scale height\\r\\n\\r\\nconst lowp vec3 rsc = vec3(5.5e-6, 13.0e-6, 22.4e-6); // Rayleigh scattering coefficient\\r\\nconst lowp float msc = 21e-6; // Mie scattering coefficient\\r\\n\\r\\nconst lowp float gr = 0.0; // Rayleigh simetry constant\\r\\nconst lowp float gm = 0.758; // Mie simetry constant\\r\\n\\r\\nvarying lowp vec4 worldPosition;\\r\\nvarying lowp vec4 sunView;\\r\\n\\r\\nconst int samples = 5;\\r\\n\\r\\n// https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter16.html\\r\\nlowp float phase(\\r\\n    lowp float g,\\r\\n    lowp float a\\r\\n) {\\r\\n    lowp float g2 = g * g;\\r\\n    return 3.0 * (1.0 - g2)  * (1.0 + a * a) / 8.0 / PI / (2.0 + g2) / pow(1.0 + g2 - 2.0 * g * a, 1.5);\\r\\n}\\r\\n\\r\\nlowp vec3 translate(lowp vec3 dir) {\\r\\n    lowp float r1 = earthRadius;\\r\\n    lowp float r2 = atmosphereRadius;\\r\\n\\r\\n    lowp float al0 = asin(dir.z);\\r\\n    lowp float az0 = atan(dir.y / dir.x);\\r\\n    if (dir.x < 0.0) {\\r\\n        az0 += PI;\\r\\n    }\\r\\n    lowp float al1 = asin(r1 / r2);\\r\\n    lowp float al2 = al1 + (1.0 - al1 / PI_2) * al0;\\r\\n    return vec3(\\r\\n        cos(al2) * cos(az0),\\r\\n        cos(al2) * sin(az0),\\r\\n        sin(al2)\\r\\n    );\\r\\n}\\r\\n\\r\\n// http://viclw17.github.io/2018/07/16/raytracing-ray-sphere-intersection/\\r\\nlowp float dtse(\\r\\n    lowp vec3 origin,\\r\\n    lowp vec3 direction,\\r\\n    lowp float radius\\r\\n) {\\r\\n    lowp vec3 center = vec3(0.0); // could be used as parameter\\r\\n    lowp vec3 oc = origin - center;\\r\\n    lowp float a = dot(direction, direction);\\r\\n    lowp float b = 2.0 * dot(direction, oc);\\r\\n    lowp float c = dot(oc, oc) - radius * radius;\\r\\n    lowp float d = b * b - 4.0 * a * c;\\r\\n    if (d < 0.0) {\\r\\n        return -1.0;\\r\\n    }\\r\\n    lowp float qd = sqrt(d);\\r\\n    lowp float t = (-qd - b) / 2.0 / a;\\r\\n    if (t >= 0.0) {\\r\\n        return t;\\r\\n    }\\r\\n    t = (qd - b) / 2.0 / a;\\r\\n    if (t > 0.0) {\\r\\n        return t;\\r\\n    }\\r\\n    return -1.0;\\r\\n}\\r\\n\\r\\nlowp vec3 getSunColor(\\r\\n    lowp vec3 sun,\\r\\n    lowp vec3 position\\r\\n) {\\r\\n    lowp float angle = acos(dot(\\r\\n        sun,\\r\\n        position\\r\\n    ));\\r\\n    return vec3(1.0) * (1.0 - smoothstep(0.0, 1.0, angle * 20.0));\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n    lowp vec3 camera = vec3(0.0, 0.0, earthRadius);\\r\\n    lowp vec3 world = normalize(worldPosition.xyz);\\r\\n    lowp vec3 position = translate(world) * atmosphereRadius;\\r\\n    lowp vec3 ray = normalize(position - camera);\\r\\n    lowp vec3 sun = normalize(sunPosition);\\r\\n\\r\\n    lowp float far = dtse(camera, ray, atmosphereRadius);\\r\\n\\r\\n    lowp float lightAngle = dot(ray, sun);\\r\\n    lowp float rshFactor = phase(gr, lightAngle);\\r\\n    lowp float mieFactor = phase(gm, lightAngle);\\r\\n\\r\\n    lowp float sampleSize = far / float(samples);\\r\\n    lowp vec3 samplePoint = camera + ray * sampleSize * 0.5;\\r\\n    lowp float rshOpticalDepth = 0.0;\\r\\n    lowp float mieOpticalDepth = 0.0;\\r\\n    lowp vec3 rshAccumulated = vec3(0.0);\\r\\n    lowp vec3 mieAccumulated = vec3(0.0);\\r\\n\\r\\n    for (int i = 0; i < samples; i ++) {\\r\\n        lowp float far2 = dtse(\\r\\n            samplePoint,\\r\\n            sun,\\r\\n            atmosphereRadius\\r\\n        );\\r\\n        lowp float sampleSize2 = far2 / float(samples);\\r\\n        lowp vec3 samplePoint2 = samplePoint + sampleSize2 / 2.0 * sun;\\r\\n        lowp float rshOpticalDepth2 = 0.0;\\r\\n        lowp float mieOpticalDepth2 = 0.0;\\r\\n\\r\\n        for (int j = 0; j < samples; j ++) {\\r\\n            lowp float height = length(samplePoint2) - earthRadius;\\r\\n            lowp float rshOpticalDepthStep = exp(-height / rsh) * sampleSize2;\\r\\n            lowp float mieOpticalDepthStep = exp(-height / msh) * sampleSize2;\\r\\n\\r\\n            rshOpticalDepth2 += rshOpticalDepthStep;\\r\\n            mieOpticalDepth2 += mieOpticalDepthStep;\\r\\n\\r\\n            samplePoint2 += sun * sampleSize2;\\r\\n        }\\r\\n\\r\\n        lowp float height = length(samplePoint) - earthRadius;\\r\\n        lowp float rshOpticalDepthStep = exp(-height / rsh) * sampleSize;\\r\\n        lowp float mieOpticalDepthStep = exp(-height / msh) * sampleSize;\\r\\n\\r\\n        rshOpticalDepth += rshOpticalDepthStep;\\r\\n        mieOpticalDepth += mieOpticalDepthStep;\\r\\n\\r\\n        lowp vec3 outScattering = exp(\\r\\n            -rsc * (rshOpticalDepth + rshOpticalDepth2)\\r\\n            -msc * (mieOpticalDepth + mieOpticalDepth2)\\r\\n        );\\r\\n\\r\\n        rshAccumulated += rshOpticalDepthStep * outScattering;\\r\\n        mieAccumulated += mieOpticalDepthStep * outScattering;\\r\\n\\r\\n        samplePoint += ray * sampleSize;\\r\\n    }\\r\\n\\r\\n    lowp vec3 color = vec3(0.0);\\r\\n\\r\\n    // mieAccumulated *= 0.0;\\r\\n    // rshAccumulated *= 0.5;\\r\\n    lowp vec3 sunColor = getSunColor(sun, world);\\r\\n    lowp vec3 totalLight = si * (\\r\\n        rshFactor * rsc * rshAccumulated +\\r\\n        mieFactor * msc * mieAccumulated\\r\\n    );\\r\\n    // color += totalLight;\\r\\n    color += 1.0 - exp(-1.0 * totalLight);\\r\\n    color += sunColor;\\r\\n\\r\\n    gl_FragColor = vec4(color, 1.0);\\r\\n}\\r\\n\"","import {vec3 as Vec3} from 'gl-matrix';\r\nimport {inRange} from './utils';\r\nimport {getSunPosition} from './create-sky';\r\nimport {FieldsOfType} from './types';\r\n\r\nconst INITIAL_STATE = {\r\n    app: {\r\n        active: true\r\n    },\r\n    camera: {\r\n        center: Vec3.fromValues(106, -461, 93),\r\n        position: Vec3.fromValues(-341, 106, 169),\r\n    },\r\n    terrain: {\r\n        visible: true\r\n    },\r\n    water: {\r\n        start: Date.now(),\r\n        time: 0,\r\n        visible: true,\r\n        useReflection: true,\r\n        useRefraction: true\r\n    },\r\n    light: {\r\n        // directional light\r\n        direction: Vec3.fromValues(0, 0, 0),\r\n        color: Vec3.fromValues(0, 0, 0),\r\n    },\r\n    sky: {\r\n        dayTime: 1 * 3600 * 1000,\r\n        visible: true,\r\n        sunPosition: Vec3.fromValues(0, 0, 0),\r\n        autoSunMove: true\r\n    }\r\n}\r\n\r\nexport type State = typeof INITIAL_STATE;\r\n\r\n\r\nexport const getInitialState = () => INITIAL_STATE;\r\n\r\nexport const toggle = <\r\n    K1 extends keyof State,\r\n    K2 extends FieldsOfType<State[K1], boolean>,\r\n>(\r\n    state: State,\r\n    key1: K1,\r\n    key2: K2\r\n) => {\r\n    (state as any)[key1][key2] = !state[key1][key2];\r\n}\r\n\r\nexport const zoom = (state: State, dz: number) => {\r\n    const {position, center} = state.camera;\r\n    const eye = Vec3.create();\r\n    const distance = Vec3.distance(center, position);\r\n    const nextDistance = inRange(distance + dz, 50, 1000);\r\n    Vec3.sub(eye, position, center);\r\n    Vec3.scale(eye, eye, nextDistance / distance);\r\n    Vec3.add(position, center, eye);\r\n}\r\n\r\nexport const moveCamera = (\r\n    state: State,\r\n    e: {\r\n        left: number,\r\n        forward: number,\r\n        up: number\r\n    }\r\n) => {\r\n    const {position, center} = state.camera;\r\n    const forwardMove = Vec3.create();\r\n    const leftMove = Vec3.create();\r\n    const move = Vec3.create();\r\n    Vec3.sub(forwardMove, center, position);\r\n    Vec3.rotateZ(leftMove, forwardMove, [0, 0, 1], Math.PI / 2);\r\n    leftMove[2] = 0;\r\n\r\n    if (e.forward === 1) {\r\n        Vec3.add(move, move, forwardMove);\r\n    }\r\n    if (e.forward === -1) {\r\n        Vec3.sub(move, move, forwardMove);\r\n    }\r\n    if (e.left === 1) {\r\n        Vec3.add(move, move, leftMove);\r\n    }\r\n    if (e.left === -1) {\r\n        Vec3.sub(move, move, leftMove);\r\n    }\r\n\r\n    Vec3.normalize(move, move);\r\n    Vec3.add(move, move, [0, 0, e.up]);\r\n    Vec3.scale(move, move, 6);\r\n    Vec3.add(position, position, move)\r\n    Vec3.add(center, center, move);\r\n}\r\n\r\nexport const rorateCamera = (state: State, dx: number, dy: number) => {\r\n    const {position, center} = state.camera;\r\n    const eye = Vec3.create();\r\n    Vec3.sub(eye, center, position);\r\n    const length = Vec3.length(eye);\r\n    Vec3.rotateZ(eye, eye, [0, 0, 0], dx);\r\n    eye[2] -= dy;\r\n    Vec3.normalize(eye, eye);\r\n    Vec3.scale(eye, eye, length);\r\n    Vec3.add(center, position, eye);\r\n}\r\n\r\nexport const moveSun = (state: State, dt: number) => {\r\n    const DAY = 24 * 3600 * 1000;\r\n    let dayTime = state.sky.dayTime + dt;\r\n    if (dayTime < 0) {\r\n        dayTime += DAY;\r\n    } else if (dayTime > DAY) {\r\n        dayTime -= DAY;\r\n    }\r\n    setDayTime(state, dayTime);\r\n}\r\nexport const autoMoveSun = (state: State, spead: number) => {\r\n    if (state.sky.autoSunMove) {\r\n        moveSun(state, spead);\r\n    }\r\n}\r\nexport const updateWaterTime = (state: State) => {\r\n    state.water.time = Date.now() - state.water.start;\r\n}\r\n\r\nconst setDayTime = (state: State, time: number) => {\r\n    const {\r\n        sunPosition,\r\n        directionalLightColor,\r\n        directionalLightVector\r\n    } = getSunPosition(time);\r\n    state.sky.dayTime = time;\r\n    state.sky.sunPosition = sunPosition;\r\n    state.light.color = directionalLightColor;\r\n    state.light.direction = directionalLightVector;\r\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };"],"sourceRoot":""}